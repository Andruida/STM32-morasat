ARM GAS  /tmp/cciVSvjL.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"rf69.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/rf69.c"
  18              		.section	.text.spi_init,"ax",%progbits
  19              		.align	1
  20              		.global	spi_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	spi_init:
  26              	.LVL0:
  27              	.LFB40:
   1:Core/Src/rf69.c **** // RH_RF69.cpp
   2:Core/Src/rf69.c **** //
   3:Core/Src/rf69.c **** // Copyright (C) 2011 Mike McCauley
   4:Core/Src/rf69.c **** // $Id: RH_RF69.cpp,v 1.30 2017/11/06 00:04:08 mikem Exp $
   5:Core/Src/rf69.c **** 
   6:Core/Src/rf69.c **** #include <string.h>
   7:Core/Src/rf69.c **** 
   8:Core/Src/rf69.c **** #include "main.h"
   9:Core/Src/rf69.c **** #include "rf69.h"
  10:Core/Src/rf69.c **** 
  11:Core/Src/rf69.c **** #define TAG "RF69"
  12:Core/Src/rf69.c **** 
  13:Core/Src/rf69.c **** 
  14:Core/Src/rf69.c **** /// Array of instances connected to interrupts 0 and 1
  15:Core/Src/rf69.c **** //static RH_RF69*		_deviceForInterrupt[];
  16:Core/Src/rf69.c **** 
  17:Core/Src/rf69.c **** /// Index of next interrupt number to use in _deviceForInterrupt
  18:Core/Src/rf69.c **** //static uint8_t		_interruptCount;
  19:Core/Src/rf69.c **** 
  20:Core/Src/rf69.c **** /// The configured interrupt pin connected to this instance
  21:Core/Src/rf69.c **** //static uint8_t				_interruptPin;
  22:Core/Src/rf69.c **** 
  23:Core/Src/rf69.c **** /// The index into _deviceForInterrupt[] for this device (if an interrupt is already allocated)
  24:Core/Src/rf69.c **** /// else 0xff
  25:Core/Src/rf69.c **** //static uint8_t				_myInterruptIndex;
  26:Core/Src/rf69.c **** 
  27:Core/Src/rf69.c **** /// The radio OP mode to use when mode is RHModeIdle
  28:Core/Src/rf69.c **** static uint8_t _idleMode; 
  29:Core/Src/rf69.c **** 
  30:Core/Src/rf69.c **** /// The reported device type
  31:Core/Src/rf69.c **** static uint8_t _deviceType;
ARM GAS  /tmp/cciVSvjL.s 			page 2


  32:Core/Src/rf69.c **** 
  33:Core/Src/rf69.c **** /// The selected output power in dBm
  34:Core/Src/rf69.c **** static int8_t _power;
  35:Core/Src/rf69.c **** 
  36:Core/Src/rf69.c **** /// The message length in _buf
  37:Core/Src/rf69.c **** static uint8_t _bufLen;
  38:Core/Src/rf69.c **** 
  39:Core/Src/rf69.c **** /// Array of octets of teh last received message or the next to transmit message
  40:Core/Src/rf69.c **** static uint8_t _buf[RH_RF69_MAX_MESSAGE_LEN];
  41:Core/Src/rf69.c **** 
  42:Core/Src/rf69.c **** /// True when there is a valid message in the Rx buffer
  43:Core/Src/rf69.c **** static bool _rxBufValid;
  44:Core/Src/rf69.c **** 
  45:Core/Src/rf69.c **** /// Time in millis since the last preamble was received (and the last time the RSSI was measured)
  46:Core/Src/rf69.c **** static uint32_t	_lastPreambleTime;
  47:Core/Src/rf69.c **** 
  48:Core/Src/rf69.c **** #define RH_BROADCAST_ADDRESS 0xff
  49:Core/Src/rf69.c **** 
  50:Core/Src/rf69.c **** /// The current transport operating mode
  51:Core/Src/rf69.c **** static RHMode _mode = RHModeInitialising;
  52:Core/Src/rf69.c **** 
  53:Core/Src/rf69.c **** /// This node id
  54:Core/Src/rf69.c **** static uint8_t _thisAddress = RH_BROADCAST_ADDRESS;
  55:Core/Src/rf69.c **** 	
  56:Core/Src/rf69.c **** /// Whether the transport is in promiscuous mode
  57:Core/Src/rf69.c **** static bool	_promiscuous;
  58:Core/Src/rf69.c **** 
  59:Core/Src/rf69.c **** /// TO header in the last received mesasge
  60:Core/Src/rf69.c **** static uint8_t _rxHeaderTo;
  61:Core/Src/rf69.c **** 
  62:Core/Src/rf69.c **** /// FROM header in the last received mesasge
  63:Core/Src/rf69.c **** static uint8_t _rxHeaderFrom;
  64:Core/Src/rf69.c **** 
  65:Core/Src/rf69.c **** /// ID header in the last received mesasge
  66:Core/Src/rf69.c **** static uint8_t _rxHeaderId;
  67:Core/Src/rf69.c **** 
  68:Core/Src/rf69.c **** /// FLAGS header in the last received mesasge
  69:Core/Src/rf69.c **** static uint8_t _rxHeaderFlags;
  70:Core/Src/rf69.c **** 
  71:Core/Src/rf69.c **** /// TO header to send in all messages
  72:Core/Src/rf69.c **** static uint8_t _txHeaderTo = RH_BROADCAST_ADDRESS;
  73:Core/Src/rf69.c **** 
  74:Core/Src/rf69.c **** /// FROM header to send in all messages
  75:Core/Src/rf69.c **** static uint8_t _txHeaderFrom = RH_BROADCAST_ADDRESS;
  76:Core/Src/rf69.c **** 
  77:Core/Src/rf69.c **** /// ID header to send in all messages
  78:Core/Src/rf69.c **** static uint8_t _txHeaderId = 0;
  79:Core/Src/rf69.c **** 
  80:Core/Src/rf69.c **** /// FLAGS header to send in all messages
  81:Core/Src/rf69.c **** static uint8_t _txHeaderFlags = 0;
  82:Core/Src/rf69.c **** 
  83:Core/Src/rf69.c **** /// The value of the last received RSSI value, in some transport specific units
  84:Core/Src/rf69.c **** static int16_t _lastRssi;
  85:Core/Src/rf69.c **** 
  86:Core/Src/rf69.c **** /// Count of the number of bad messages (eg bad checksum etc) received
  87:Core/Src/rf69.c **** //static uint16_t	_rxBad = 0;
  88:Core/Src/rf69.c **** 
ARM GAS  /tmp/cciVSvjL.s 			page 3


  89:Core/Src/rf69.c **** /// Count of the number of successfully transmitted messaged
  90:Core/Src/rf69.c **** static uint16_t	_rxGood = 0;
  91:Core/Src/rf69.c **** 
  92:Core/Src/rf69.c **** /// Count of the number of bad messages (correct checksum etc) received
  93:Core/Src/rf69.c **** static uint16_t	_txGood = 0;
  94:Core/Src/rf69.c **** 	
  95:Core/Src/rf69.c **** /// Channel activity detected
  96:Core/Src/rf69.c **** //static bool _cad;
  97:Core/Src/rf69.c **** 
  98:Core/Src/rf69.c **** /// Channel activity timeout in ms
  99:Core/Src/rf69.c **** //static unsigned int _cad_timeout = 0;
 100:Core/Src/rf69.c **** 
 101:Core/Src/rf69.c **** 
 102:Core/Src/rf69.c **** 
 103:Core/Src/rf69.c **** 
 104:Core/Src/rf69.c **** // These are indexed by the values of ModemConfigChoice
 105:Core/Src/rf69.c **** // Stored in flash (program) memory to save SRAM
 106:Core/Src/rf69.c **** // It is important to keep the modulation index for FSK between 0.5 and 10
 107:Core/Src/rf69.c **** // modulation index = 2 * Fdev / BR
 108:Core/Src/rf69.c **** // Note that I have not had much success with FSK with Fd > ~5
 109:Core/Src/rf69.c **** // You have to construct these by hand, using the data from the RF69 Datasheet :-(
 110:Core/Src/rf69.c **** // or use the SX1231 starter kit software (Ctl-Alt-N to use that without a connected radio)
 111:Core/Src/rf69.c **** #define CONFIG_FSK (RH_RF69_DATAMODUL_DATAMODE_PACKET | RH_RF69_DATAMODUL_MODULATIONTYPE_FSK | RH_R
 112:Core/Src/rf69.c **** #define CONFIG_GFSK (RH_RF69_DATAMODUL_DATAMODE_PACKET | RH_RF69_DATAMODUL_MODULATIONTYPE_FSK | RH_
 113:Core/Src/rf69.c **** #define CONFIG_OOK (RH_RF69_DATAMODUL_DATAMODE_PACKET | RH_RF69_DATAMODUL_MODULATIONTYPE_OOK | RH_R
 114:Core/Src/rf69.c **** 
 115:Core/Src/rf69.c **** // Choices for RH_RF69_REG_37_PACKETCONFIG1:
 116:Core/Src/rf69.c **** #define CONFIG_NOWHITE (RH_RF69_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RH_RF69_PACKETCONFIG1_DCFREE_
 117:Core/Src/rf69.c **** #define CONFIG_WHITE (RH_RF69_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RH_RF69_PACKETCONFIG1_DCFREE_WH
 118:Core/Src/rf69.c **** #define CONFIG_MANCHESTER (RH_RF69_PACKETCONFIG1_PACKETFORMAT_VARIABLE | RH_RF69_PACKETCONFIG1_DCFR
 119:Core/Src/rf69.c **** static const ModemConfig MODEM_CONFIG_TABLE[] =
 120:Core/Src/rf69.c **** {
 121:Core/Src/rf69.c **** 	//	02,		   03,	 04,   05,	 06,   19,	 1a,  37
 122:Core/Src/rf69.c **** 	// FSK, No Manchester, no shaping, whitening, CRC, no address filtering
 123:Core/Src/rf69.c **** 	// AFC BW == RX BW == 2 x bit rate
 124:Core/Src/rf69.c **** 	// Low modulation indexes of ~ 1 at slow speeds do not seem to work very well. Choose MI of 2.
 125:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x3e, 0x80, 0x00, 0x52, 0xf4, 0xf4, CONFIG_WHITE}, // FSK_Rb2Fd5
 126:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x34, 0x15, 0x00, 0x4f, 0xf4, 0xf4, CONFIG_WHITE}, // FSK_Rb2_4Fd4_8
 127:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x1a, 0x0b, 0x00, 0x9d, 0xf4, 0xf4, CONFIG_WHITE}, // FSK_Rb4_8Fd9_6
 128:Core/Src/rf69.c **** 
 129:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x0d, 0x05, 0x01, 0x3b, 0xf4, 0xf4, CONFIG_WHITE}, // FSK_Rb9_6Fd19_2
 130:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x06, 0x83, 0x02, 0x75, 0xf3, 0xf3, CONFIG_WHITE}, // FSK_Rb19_2Fd38_4
 131:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x03, 0x41, 0x04, 0xea, 0xf2, 0xf2, CONFIG_WHITE}, // FSK_Rb38_4Fd76_8
 132:Core/Src/rf69.c **** 
 133:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x02, 0x2c, 0x07, 0xae, 0xe2, 0xe2, CONFIG_WHITE}, // FSK_Rb57_6Fd120
 134:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x01, 0x00, 0x08, 0x00, 0xe1, 0xe1, CONFIG_WHITE}, // FSK_Rb125Fd125
 135:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x00, 0x80, 0x10, 0x00, 0xe0, 0xe0, CONFIG_WHITE}, // FSK_Rb250Fd250
 136:Core/Src/rf69.c **** 	{ CONFIG_FSK,  0x02, 0x40, 0x03, 0x33, 0x42, 0x42, CONFIG_WHITE}, // FSK_Rb55555Fd50
 137:Core/Src/rf69.c **** 
 138:Core/Src/rf69.c **** 	//	02,		   03,	 04,   05,	 06,   19,	 1a,  37
 139:Core/Src/rf69.c **** 	// GFSK (BT=1.0), No Manchester, whitening, CRC, no address filtering
 140:Core/Src/rf69.c **** 	// AFC BW == RX BW == 2 x bit rate
 141:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x3e, 0x80, 0x00, 0x52, 0xf4, 0xf5, CONFIG_WHITE}, // GFSK_Rb2Fd5
 142:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x34, 0x15, 0x00, 0x4f, 0xf4, 0xf4, CONFIG_WHITE}, // GFSK_Rb2_4Fd4_8
 143:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x1a, 0x0b, 0x00, 0x9d, 0xf4, 0xf4, CONFIG_WHITE}, // GFSK_Rb4_8Fd9_6
 144:Core/Src/rf69.c **** 
 145:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x0d, 0x05, 0x01, 0x3b, 0xf4, 0xf4, CONFIG_WHITE}, // GFSK_Rb9_6Fd19_2
ARM GAS  /tmp/cciVSvjL.s 			page 4


 146:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x06, 0x83, 0x02, 0x75, 0xf3, 0xf3, CONFIG_WHITE}, // GFSK_Rb19_2Fd38_4
 147:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x03, 0x41, 0x04, 0xea, 0xf2, 0xf2, CONFIG_WHITE}, // GFSK_Rb38_4Fd76_8
 148:Core/Src/rf69.c **** 
 149:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x02, 0x2c, 0x07, 0xae, 0xe2, 0xe2, CONFIG_WHITE}, // GFSK_Rb57_6Fd120
 150:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x01, 0x00, 0x08, 0x00, 0xe1, 0xe1, CONFIG_WHITE}, // GFSK_Rb125Fd125
 151:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x00, 0x80, 0x10, 0x00, 0xe0, 0xe0, CONFIG_WHITE}, // GFSK_Rb250Fd250
 152:Core/Src/rf69.c **** 	{ CONFIG_GFSK, 0x02, 0x40, 0x03, 0x33, 0x42, 0x42, CONFIG_WHITE}, // GFSK_Rb55555Fd50
 153:Core/Src/rf69.c **** 
 154:Core/Src/rf69.c **** 	//	02,		   03,	 04,   05,	 06,   19,	 1a,  37
 155:Core/Src/rf69.c **** 	// OOK, No Manchester, no shaping, whitening, CRC, no address filtering
 156:Core/Src/rf69.c **** 	// with the help of the SX1231 configuration program
 157:Core/Src/rf69.c **** 	// AFC BW == RX BW
 158:Core/Src/rf69.c **** 	// All OOK configs have the default:
 159:Core/Src/rf69.c **** 	// Threshold Type: Peak
 160:Core/Src/rf69.c **** 	// Peak Threshold Step: 0.5dB
 161:Core/Src/rf69.c **** 	// Peak threshiold dec: ONce per chip
 162:Core/Src/rf69.c **** 	// Fixed threshold: 6dB
 163:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x7d, 0x00, 0x00, 0x10, 0x88, 0x88, CONFIG_WHITE}, // OOK_Rb1Bw1
 164:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x68, 0x2b, 0x00, 0x10, 0xf1, 0xf1, CONFIG_WHITE}, // OOK_Rb1_2Bw75
 165:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x34, 0x15, 0x00, 0x10, 0xf5, 0xf5, CONFIG_WHITE}, // OOK_Rb2_4Bw4_8
 166:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x1a, 0x0b, 0x00, 0x10, 0xf4, 0xf4, CONFIG_WHITE}, // OOK_Rb4_8Bw9_6
 167:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x0d, 0x05, 0x00, 0x10, 0xf3, 0xf3, CONFIG_WHITE}, // OOK_Rb9_6Bw19_2
 168:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x06, 0x83, 0x00, 0x10, 0xf2, 0xf2, CONFIG_WHITE}, // OOK_Rb19_2Bw38_4
 169:Core/Src/rf69.c **** 	{ CONFIG_OOK,  0x03, 0xe8, 0x00, 0x10, 0xe2, 0xe2, CONFIG_WHITE}, // OOK_Rb32Bw64
 170:Core/Src/rf69.c **** 
 171:Core/Src/rf69.c **** //	  { CONFIG_FSK,  0x68, 0x2b, 0x00, 0x52, 0x55, 0x55, CONFIG_WHITE}, // works: Rb1200 Fd 5000 bw1
 172:Core/Src/rf69.c **** //	  { CONFIG_FSK,  0x0c, 0x80, 0x02, 0x8f, 0x52, 0x52, CONFIG_WHITE}, // works 10/40/80
 173:Core/Src/rf69.c **** //	  { CONFIG_FSK,  0x0c, 0x80, 0x02, 0x8f, 0x53, 0x53, CONFIG_WHITE}, // works 10/40/40
 174:Core/Src/rf69.c **** 
 175:Core/Src/rf69.c **** };
 176:Core/Src/rf69.c **** 
 177:Core/Src/rf69.c **** static SPI_HandleTypeDef* _handle;
 178:Core/Src/rf69.c **** 
 179:Core/Src/rf69.c **** // Arduino compatible macros
 180:Core/Src/rf69.c **** #define LOW 0
 181:Core/Src/rf69.c **** #define HIGH 1
 182:Core/Src/rf69.c **** #define delayMicroseconds(us) delay_us(us)
 183:Core/Src/rf69.c **** #define delay(ms) HAL_Delay(ms)
 184:Core/Src/rf69.c **** #define millis() HAL_GetTick()
 185:Core/Src/rf69.c **** 
 186:Core/Src/rf69.c **** void spi_init(SPI_HandleTypeDef* handle) {
  28              		.loc 1 186 42 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 186 42 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 187:Core/Src/rf69.c ****     _handle = handle;
  37              		.loc 1 187 5 is_stmt 1 view .LVU2
  38              		.loc 1 187 13 is_stmt 0 view .LVU3
  39 0002 044B     		ldr	r3, .L2
  40 0004 1860     		str	r0, [r3]
 188:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
  41              		.loc 1 188 2 is_stmt 1 view .LVU4
ARM GAS  /tmp/cciVSvjL.s 			page 5


  42 0006 9020     		movs	r0, #144
  43              	.LVL1:
  44              		.loc 1 188 2 is_stmt 0 view .LVU5
  45 0008 0122     		movs	r2, #1
  46 000a 1021     		movs	r1, #16
  47 000c C005     		lsls	r0, r0, #23
  48 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
  49              	.LVL2:
 189:Core/Src/rf69.c **** }
  50              		.loc 1 189 1 view .LVU6
  51              		@ sp needed
  52 0012 10BD     		pop	{r4, pc}
  53              	.L3:
  54              		.align	2
  55              	.L2:
  56 0014 00000000 		.word	_handle
  57              		.cfi_endproc
  58              	.LFE40:
  60              		.section	.rodata.spi_transfer.str1.4,"aMS",%progbits,1
  61              		.align	2
  62              	.LC1:
  63 0000 00       		.ascii	"\000"
  64              		.section	.text.spi_transfer,"ax",%progbits
  65              		.align	1
  66              		.global	spi_transfer
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  71              	spi_transfer:
  72              	.LVL3:
  73              	.LFB41:
 190:Core/Src/rf69.c **** 
 191:Core/Src/rf69.c **** uint8_t spi_transfer(uint8_t address)
 192:Core/Src/rf69.c **** {
  74              		.loc 1 192 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		.loc 1 192 1 is_stmt 0 view .LVU8
  79 0000 00B5     		push	{lr}
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 14, -4
  82 0002 85B0     		sub	sp, sp, #20
  83              		.cfi_def_cfa_offset 24
 193:Core/Src/rf69.c **** 	uint8_t datain[1] = {0};
  84              		.loc 1 193 2 is_stmt 1 view .LVU9
  85              		.loc 1 193 10 is_stmt 0 view .LVU10
  86 0004 094B     		ldr	r3, .L5
  87 0006 1B78     		ldrb	r3, [r3]
  88 0008 6A46     		mov	r2, sp
  89 000a 1373     		strb	r3, [r2, #12]
 194:Core/Src/rf69.c **** 	uint8_t dataout[1] = {0};
  90              		.loc 1 194 2 is_stmt 1 view .LVU11
  91              		.loc 1 194 10 is_stmt 0 view .LVU12
  92 000c 1372     		strb	r3, [r2, #8]
 195:Core/Src/rf69.c ****     dataout[0] = address;
  93              		.loc 1 195 5 is_stmt 1 view .LVU13
ARM GAS  /tmp/cciVSvjL.s 			page 6


  94              		.loc 1 195 16 is_stmt 0 view .LVU14
  95 000e 1072     		strb	r0, [r2, #8]
 196:Core/Src/rf69.c ****     
 197:Core/Src/rf69.c ****     HAL_SPI_TransmitReceive(_handle, dataout, datain, 1, 1000);
  96              		.loc 1 197 5 is_stmt 1 view .LVU15
  97 0010 074B     		ldr	r3, .L5+4
  98 0012 1868     		ldr	r0, [r3]
  99              	.LVL4:
 100              		.loc 1 197 5 is_stmt 0 view .LVU16
 101 0014 FA23     		movs	r3, #250
 102 0016 9B00     		lsls	r3, r3, #2
 103 0018 0093     		str	r3, [sp]
 104 001a 0123     		movs	r3, #1
 105 001c 03AA     		add	r2, sp, #12
 106              	.LVL5:
 107              		.loc 1 197 5 view .LVU17
 108 001e 02A9     		add	r1, sp, #8
 109 0020 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 110              	.LVL6:
 198:Core/Src/rf69.c **** 
 199:Core/Src/rf69.c **** 	return datain[0];
 111              		.loc 1 199 2 is_stmt 1 view .LVU18
 112              		.loc 1 199 15 is_stmt 0 view .LVU19
 113 0024 6B46     		mov	r3, sp
 114 0026 187B     		ldrb	r0, [r3, #12]
 200:Core/Src/rf69.c **** }
 115              		.loc 1 200 1 view .LVU20
 116 0028 05B0     		add	sp, sp, #20
 117              		@ sp needed
 118 002a 00BD     		pop	{pc}
 119              	.L6:
 120              		.align	2
 121              	.L5:
 122 002c 00000000 		.word	.LC1
 123 0030 00000000 		.word	_handle
 124              		.cfi_endproc
 125              	.LFE41:
 127              		.section	.text.spiRead,"ax",%progbits
 128              		.align	1
 129              		.global	spiRead
 130              		.syntax unified
 131              		.code	16
 132              		.thumb_func
 134              	spiRead:
 135              	.LVL7:
 136              	.LFB42:
 201:Core/Src/rf69.c **** 
 202:Core/Src/rf69.c **** uint8_t spiRead(uint8_t reg)
 203:Core/Src/rf69.c **** {
 137              		.loc 1 203 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		.loc 1 203 1 is_stmt 0 view .LVU22
 142 0000 70B5     		push	{r4, r5, r6, lr}
 143              		.cfi_def_cfa_offset 16
 144              		.cfi_offset 4, -16
ARM GAS  /tmp/cciVSvjL.s 			page 7


 145              		.cfi_offset 5, -12
 146              		.cfi_offset 6, -8
 147              		.cfi_offset 14, -4
 148 0002 0400     		movs	r4, r0
 204:Core/Src/rf69.c **** 	uint8_t val;
 149              		.loc 1 204 2 is_stmt 1 view .LVU23
 205:Core/Src/rf69.c ****     HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_RESET);
 150              		.loc 1 205 5 view .LVU24
 151 0004 9025     		movs	r5, #144
 152 0006 ED05     		lsls	r5, r5, #23
 153 0008 0022     		movs	r2, #0
 154 000a 1021     		movs	r1, #16
 155 000c 2800     		movs	r0, r5
 156              	.LVL8:
 157              		.loc 1 205 5 is_stmt 0 view .LVU25
 158 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 159              	.LVL9:
 206:Core/Src/rf69.c ****     spi_transfer(reg & ~RH_RF69_SPI_WRITE_MASK); // Send the address with the write mask off
 160              		.loc 1 206 5 is_stmt 1 view .LVU26
 161 0012 7F20     		movs	r0, #127
 162 0014 2040     		ands	r0, r4
 163 0016 FFF7FEFF 		bl	spi_transfer
 164              	.LVL10:
 207:Core/Src/rf69.c ****     val = spi_transfer(0); // The written value is ignored, reg value is read
 165              		.loc 1 207 5 view .LVU27
 166              		.loc 1 207 11 is_stmt 0 view .LVU28
 167 001a 0020     		movs	r0, #0
 168 001c FFF7FEFF 		bl	spi_transfer
 169              	.LVL11:
 170 0020 0400     		movs	r4, r0
 171              	.LVL12:
 208:Core/Src/rf69.c ****     HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 172              		.loc 1 208 5 is_stmt 1 view .LVU29
 173 0022 0122     		movs	r2, #1
 174 0024 1021     		movs	r1, #16
 175 0026 2800     		movs	r0, r5
 176 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 177              	.LVL13:
 209:Core/Src/rf69.c **** 	return val;
 178              		.loc 1 209 2 view .LVU30
 210:Core/Src/rf69.c **** }
 179              		.loc 1 210 1 is_stmt 0 view .LVU31
 180 002c 2000     		movs	r0, r4
 181              		@ sp needed
 182              	.LVL14:
 183              		.loc 1 210 1 view .LVU32
 184 002e 70BD     		pop	{r4, r5, r6, pc}
 185              		.cfi_endproc
 186              	.LFE42:
 188              		.section	.text.spiWrite,"ax",%progbits
 189              		.align	1
 190              		.global	spiWrite
 191              		.syntax unified
 192              		.code	16
 193              		.thumb_func
 195              	spiWrite:
 196              	.LVL15:
ARM GAS  /tmp/cciVSvjL.s 			page 8


 197              	.LFB43:
 211:Core/Src/rf69.c **** 
 212:Core/Src/rf69.c **** uint8_t spiWrite(uint8_t reg, uint8_t val)
 213:Core/Src/rf69.c **** {
 198              		.loc 1 213 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		.loc 1 213 1 is_stmt 0 view .LVU34
 203 0000 70B5     		push	{r4, r5, r6, lr}
 204              		.cfi_def_cfa_offset 16
 205              		.cfi_offset 4, -16
 206              		.cfi_offset 5, -12
 207              		.cfi_offset 6, -8
 208              		.cfi_offset 14, -4
 209 0002 0400     		movs	r4, r0
 210 0004 0D00     		movs	r5, r1
 214:Core/Src/rf69.c **** 	uint8_t status = 0;
 211              		.loc 1 214 2 is_stmt 1 view .LVU35
 212              	.LVL16:
 215:Core/Src/rf69.c ****     HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_RESET);
 213              		.loc 1 215 5 view .LVU36
 214 0006 9026     		movs	r6, #144
 215 0008 F605     		lsls	r6, r6, #23
 216 000a 0022     		movs	r2, #0
 217 000c 1021     		movs	r1, #16
 218              	.LVL17:
 219              		.loc 1 215 5 is_stmt 0 view .LVU37
 220 000e 3000     		movs	r0, r6
 221              	.LVL18:
 222              		.loc 1 215 5 view .LVU38
 223 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 224              	.LVL19:
 216:Core/Src/rf69.c ****     status = spi_transfer(reg | RH_RF69_SPI_WRITE_MASK); // Send the address with the write mask on
 225              		.loc 1 216 5 is_stmt 1 view .LVU39
 226              		.loc 1 216 14 is_stmt 0 view .LVU40
 227 0014 8020     		movs	r0, #128
 228 0016 4042     		rsbs	r0, r0, #0
 229 0018 2043     		orrs	r0, r4
 230 001a C0B2     		uxtb	r0, r0
 231 001c FFF7FEFF 		bl	spi_transfer
 232              	.LVL20:
 233 0020 0400     		movs	r4, r0
 234              	.LVL21:
 217:Core/Src/rf69.c ****     spi_transfer(val); // New value follows
 235              		.loc 1 217 5 is_stmt 1 view .LVU41
 236 0022 2800     		movs	r0, r5
 237 0024 FFF7FEFF 		bl	spi_transfer
 238              	.LVL22:
 218:Core/Src/rf69.c ****     HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 239              		.loc 1 218 5 view .LVU42
 240 0028 0122     		movs	r2, #1
 241 002a 1021     		movs	r1, #16
 242 002c 3000     		movs	r0, r6
 243 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 244              	.LVL23:
 219:Core/Src/rf69.c **** 	return status;
ARM GAS  /tmp/cciVSvjL.s 			page 9


 245              		.loc 1 219 2 view .LVU43
 220:Core/Src/rf69.c **** }
 246              		.loc 1 220 1 is_stmt 0 view .LVU44
 247 0032 2000     		movs	r0, r4
 248              		@ sp needed
 249              	.LVL24:
 250              	.LVL25:
 251              		.loc 1 220 1 view .LVU45
 252 0034 70BD     		pop	{r4, r5, r6, pc}
 253              		.cfi_endproc
 254              	.LFE43:
 256              		.section	.text.spiBurstRead,"ax",%progbits
 257              		.align	1
 258              		.global	spiBurstRead
 259              		.syntax unified
 260              		.code	16
 261              		.thumb_func
 263              	spiBurstRead:
 264              	.LVL26:
 265              	.LFB44:
 221:Core/Src/rf69.c **** 
 222:Core/Src/rf69.c **** uint8_t spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
 223:Core/Src/rf69.c **** {
 266              		.loc 1 223 1 is_stmt 1 view -0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              		.loc 1 223 1 is_stmt 0 view .LVU47
 271 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 272              		.cfi_def_cfa_offset 20
 273              		.cfi_offset 4, -20
 274              		.cfi_offset 5, -16
 275              		.cfi_offset 6, -12
 276              		.cfi_offset 7, -8
 277              		.cfi_offset 14, -4
 278 0002 C646     		mov	lr, r8
 279 0004 00B5     		push	{lr}
 280              		.cfi_def_cfa_offset 24
 281              		.cfi_offset 8, -24
 282 0006 0400     		movs	r4, r0
 283 0008 0E00     		movs	r6, r1
 284 000a 1500     		movs	r5, r2
 224:Core/Src/rf69.c **** 	uint8_t status = 0;
 285              		.loc 1 224 2 is_stmt 1 view .LVU48
 286              	.LVL27:
 225:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_RESET);
 287              		.loc 1 225 2 view .LVU49
 288 000c 9020     		movs	r0, #144
 289              	.LVL28:
 290              		.loc 1 225 2 is_stmt 0 view .LVU50
 291 000e 0022     		movs	r2, #0
 292              	.LVL29:
 293              		.loc 1 225 2 view .LVU51
 294 0010 1021     		movs	r1, #16
 295              	.LVL30:
 296              		.loc 1 225 2 view .LVU52
 297 0012 C005     		lsls	r0, r0, #23
ARM GAS  /tmp/cciVSvjL.s 			page 10


 298 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 299              	.LVL31:
 226:Core/Src/rf69.c **** 	status = spi_transfer(reg & ~RH_RF69_SPI_WRITE_MASK); // Send the start address with the write mas
 300              		.loc 1 226 2 is_stmt 1 view .LVU53
 301              		.loc 1 226 11 is_stmt 0 view .LVU54
 302 0018 7F20     		movs	r0, #127
 303 001a 2040     		ands	r0, r4
 304 001c FFF7FEFF 		bl	spi_transfer
 305              	.LVL32:
 306 0020 8046     		mov	r8, r0
 307              	.LVL33:
 227:Core/Src/rf69.c **** 	while (len--) *dest++ = spi_transfer(0);
 308              		.loc 1 227 2 is_stmt 1 view .LVU55
 309              		.loc 1 227 8 is_stmt 0 view .LVU56
 310 0022 06E0     		b	.L10
 311              	.LVL34:
 312              	.L11:
 313              		.loc 1 227 16 is_stmt 1 discriminator 2 view .LVU57
 314              		.loc 1 227 21 is_stmt 0 discriminator 2 view .LVU58
 315 0024 771C     		adds	r7, r6, #1
 316              	.LVL35:
 317              		.loc 1 227 26 discriminator 2 view .LVU59
 318 0026 0020     		movs	r0, #0
 319 0028 FFF7FEFF 		bl	spi_transfer
 320              	.LVL36:
 321              		.loc 1 227 24 discriminator 2 view .LVU60
 322 002c 3070     		strb	r0, [r6]
 323              		.loc 1 227 12 discriminator 1 view .LVU61
 324 002e 2500     		movs	r5, r4
 325              		.loc 1 227 21 discriminator 2 view .LVU62
 326 0030 3E00     		movs	r6, r7
 327              	.LVL37:
 328              	.L10:
 329              		.loc 1 227 9 is_stmt 1 discriminator 1 view .LVU63
 330              		.loc 1 227 12 is_stmt 0 discriminator 1 view .LVU64
 331 0032 6C1E     		subs	r4, r5, #1
 332 0034 E4B2     		uxtb	r4, r4
 333              	.LVL38:
 334              		.loc 1 227 9 discriminator 1 view .LVU65
 335 0036 002D     		cmp	r5, #0
 336 0038 F4D1     		bne	.L11
 228:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 337              		.loc 1 228 2 is_stmt 1 view .LVU66
 338 003a 9020     		movs	r0, #144
 339 003c 0122     		movs	r2, #1
 340 003e 1021     		movs	r1, #16
 341 0040 C005     		lsls	r0, r0, #23
 342 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 343              	.LVL39:
 229:Core/Src/rf69.c **** 	return status;
 344              		.loc 1 229 2 view .LVU67
 230:Core/Src/rf69.c **** }
 345              		.loc 1 230 1 is_stmt 0 view .LVU68
 346 0046 4046     		mov	r0, r8
 347              		@ sp needed
 348              	.LVL40:
 349              	.LVL41:
ARM GAS  /tmp/cciVSvjL.s 			page 11


 350              	.LVL42:
 351              	.LVL43:
 352              		.loc 1 230 1 view .LVU69
 353 0048 80BC     		pop	{r7}
 354 004a B846     		mov	r8, r7
 355 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 356              		.cfi_endproc
 357              	.LFE44:
 359              		.section	.text.spiBurstWrite,"ax",%progbits
 360              		.align	1
 361              		.global	spiBurstWrite
 362              		.syntax unified
 363              		.code	16
 364              		.thumb_func
 366              	spiBurstWrite:
 367              	.LVL44:
 368              	.LFB45:
 231:Core/Src/rf69.c **** 
 232:Core/Src/rf69.c **** uint8_t spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
 233:Core/Src/rf69.c **** {
 369              		.loc 1 233 1 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		.loc 1 233 1 is_stmt 0 view .LVU71
 374 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 375              		.cfi_def_cfa_offset 20
 376              		.cfi_offset 4, -20
 377              		.cfi_offset 5, -16
 378              		.cfi_offset 6, -12
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 C646     		mov	lr, r8
 382 0004 00B5     		push	{lr}
 383              		.cfi_def_cfa_offset 24
 384              		.cfi_offset 8, -24
 385 0006 0400     		movs	r4, r0
 386 0008 0E00     		movs	r6, r1
 387 000a 1500     		movs	r5, r2
 234:Core/Src/rf69.c **** 	uint8_t status = 0;
 388              		.loc 1 234 2 is_stmt 1 view .LVU72
 389              	.LVL45:
 235:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_RESET);
 390              		.loc 1 235 2 view .LVU73
 391 000c 9020     		movs	r0, #144
 392              	.LVL46:
 393              		.loc 1 235 2 is_stmt 0 view .LVU74
 394 000e 0022     		movs	r2, #0
 395              	.LVL47:
 396              		.loc 1 235 2 view .LVU75
 397 0010 1021     		movs	r1, #16
 398              	.LVL48:
 399              		.loc 1 235 2 view .LVU76
 400 0012 C005     		lsls	r0, r0, #23
 401 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 402              	.LVL49:
 236:Core/Src/rf69.c **** 	status = spi_transfer(reg | RH_RF69_SPI_WRITE_MASK); // Send the start address with the write mask
ARM GAS  /tmp/cciVSvjL.s 			page 12


 403              		.loc 1 236 2 is_stmt 1 view .LVU77
 404              		.loc 1 236 11 is_stmt 0 view .LVU78
 405 0018 8020     		movs	r0, #128
 406 001a 4042     		rsbs	r0, r0, #0
 407 001c 2043     		orrs	r0, r4
 408 001e C0B2     		uxtb	r0, r0
 409 0020 FFF7FEFF 		bl	spi_transfer
 410              	.LVL50:
 411 0024 8046     		mov	r8, r0
 412              	.LVL51:
 237:Core/Src/rf69.c **** 	while (len--) spi_transfer(*src++);
 413              		.loc 1 237 2 is_stmt 1 view .LVU79
 414              		.loc 1 237 8 is_stmt 0 view .LVU80
 415 0026 05E0     		b	.L13
 416              	.LVL52:
 417              	.L14:
 418              		.loc 1 237 16 is_stmt 1 discriminator 2 view .LVU81
 419              		.loc 1 237 33 is_stmt 0 discriminator 2 view .LVU82
 420 0028 771C     		adds	r7, r6, #1
 421              	.LVL53:
 422              		.loc 1 237 16 discriminator 2 view .LVU83
 423 002a 3078     		ldrb	r0, [r6]
 424 002c FFF7FEFF 		bl	spi_transfer
 425              	.LVL54:
 426              		.loc 1 237 12 discriminator 1 view .LVU84
 427 0030 2500     		movs	r5, r4
 428              		.loc 1 237 33 discriminator 2 view .LVU85
 429 0032 3E00     		movs	r6, r7
 430              	.LVL55:
 431              	.L13:
 432              		.loc 1 237 9 is_stmt 1 discriminator 1 view .LVU86
 433              		.loc 1 237 12 is_stmt 0 discriminator 1 view .LVU87
 434 0034 6C1E     		subs	r4, r5, #1
 435 0036 E4B2     		uxtb	r4, r4
 436              	.LVL56:
 437              		.loc 1 237 9 discriminator 1 view .LVU88
 438 0038 002D     		cmp	r5, #0
 439 003a F5D1     		bne	.L14
 238:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 440              		.loc 1 238 2 is_stmt 1 view .LVU89
 441 003c 9020     		movs	r0, #144
 442 003e 0122     		movs	r2, #1
 443 0040 1021     		movs	r1, #16
 444 0042 C005     		lsls	r0, r0, #23
 445 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 446              	.LVL57:
 239:Core/Src/rf69.c **** 	return status;
 447              		.loc 1 239 2 view .LVU90
 240:Core/Src/rf69.c **** }
 448              		.loc 1 240 1 is_stmt 0 view .LVU91
 449 0048 4046     		mov	r0, r8
 450              		@ sp needed
 451              	.LVL58:
 452              	.LVL59:
 453              	.LVL60:
 454              	.LVL61:
 455              		.loc 1 240 1 view .LVU92
ARM GAS  /tmp/cciVSvjL.s 			page 13


 456 004a 80BC     		pop	{r7}
 457 004c B846     		mov	r8, r7
 458 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 459              		.cfi_endproc
 460              	.LFE45:
 462              		.section	.text.setIdleMode,"ax",%progbits
 463              		.align	1
 464              		.global	setIdleMode
 465              		.syntax unified
 466              		.code	16
 467              		.thumb_func
 469              	setIdleMode:
 470              	.LVL62:
 471              	.LFB46:
 241:Core/Src/rf69.c **** 
 242:Core/Src/rf69.c **** void setIdleMode(uint8_t idleMode)
 243:Core/Src/rf69.c **** {
 472              		.loc 1 243 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 244:Core/Src/rf69.c **** 	_idleMode = idleMode;
 477              		.loc 1 244 2 view .LVU94
 478              		.loc 1 244 12 is_stmt 0 view .LVU95
 479 0000 014B     		ldr	r3, .L16
 480 0002 1870     		strb	r0, [r3]
 245:Core/Src/rf69.c **** }
 481              		.loc 1 245 1 view .LVU96
 482              		@ sp needed
 483 0004 7047     		bx	lr
 484              	.L17:
 485 0006 C046     		.align	2
 486              	.L16:
 487 0008 00000000 		.word	_idleMode
 488              		.cfi_endproc
 489              	.LFE46:
 491              		.section	.text.readFifo,"ax",%progbits
 492              		.align	1
 493              		.global	readFifo
 494              		.syntax unified
 495              		.code	16
 496              		.thumb_func
 498              	readFifo:
 499              	.LFB48:
 246:Core/Src/rf69.c **** 
 247:Core/Src/rf69.c **** bool init(SPI_HandleTypeDef* handle)
 248:Core/Src/rf69.c **** {
 249:Core/Src/rf69.c **** 	// manual reset
 250:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_RESET_GPIO_Port, RF69_RESET_Pin, GPIO_PIN_SET);
 251:Core/Src/rf69.c **** 	delay(100);
 252:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_RESET_GPIO_Port, RF69_RESET_Pin, GPIO_PIN_RESET);
 253:Core/Src/rf69.c **** 	delay(100);
 254:Core/Src/rf69.c **** 
 255:Core/Src/rf69.c **** 	_idleMode = RH_RF69_OPMODE_MODE_STDBY;
 256:Core/Src/rf69.c **** 
 257:Core/Src/rf69.c **** 	spi_init(handle);
ARM GAS  /tmp/cciVSvjL.s 			page 14


 258:Core/Src/rf69.c **** 
 259:Core/Src/rf69.c **** 	// Get the device type and check it
 260:Core/Src/rf69.c **** 	// This also tests whether we are really connected to a device
 261:Core/Src/rf69.c **** 	// My test devices return 0x24
 262:Core/Src/rf69.c **** 	_deviceType = spiRead(RH_RF69_REG_10_VERSION);
 263:Core/Src/rf69.c **** 	if (_deviceType != 0x24) return false;
 264:Core/Src/rf69.c **** #if 0
 265:Core/Src/rf69.c **** 	if (_deviceType == 00 ||
 266:Core/Src/rf69.c **** 	_deviceType == 0xff)
 267:Core/Src/rf69.c **** 	return false;
 268:Core/Src/rf69.c **** #endif
 269:Core/Src/rf69.c **** 
 270:Core/Src/rf69.c **** 	setModeIdle();
 271:Core/Src/rf69.c **** 
 272:Core/Src/rf69.c **** 	// Configure important RH_RF69 registers
 273:Core/Src/rf69.c **** 	// Here we set up the standard packet format for use by the RH_RF69 library:
 274:Core/Src/rf69.c **** 	// 4 bytes preamble
 275:Core/Src/rf69.c **** 	// 2 SYNC words 2d, d4
 276:Core/Src/rf69.c **** 	// 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
 277:Core/Src/rf69.c **** 	// 0 to 60 bytes data
 278:Core/Src/rf69.c **** 	// RSSI Threshold -114dBm
 279:Core/Src/rf69.c **** 	// We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
 280:Core/Src/rf69.c **** 	// of the RH_RF69 payload
 281:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thres
 282:Core/Src/rf69.c **** 	// RSSITHRESH is default
 283:Core/Src/rf69.c **** //	  spiWrite(RH_RF69_REG_29_RSSITHRESH, 220); // -110 dbM
 284:Core/Src/rf69.c **** 	// SYNCCONFIG is default. SyncSize is set later by setSyncWords()
 285:Core/Src/rf69.c **** //	  spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
 286:Core/Src/rf69.c **** 	// PAYLOADLENGTH is default
 287:Core/Src/rf69.c **** //	  spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
 288:Core/Src/rf69.c **** 	// PACKETCONFIG 2 is default
 289:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
 290:Core/Src/rf69.c **** 	// If high power boost set previously, disable it
 291:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 292:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 293:Core/Src/rf69.c **** 
 294:Core/Src/rf69.c **** 	// The following can be changed later by the user if necessary.
 295:Core/Src/rf69.c **** 	// Set up default configuration
 296:Core/Src/rf69.c **** 	uint8_t syncwords[] = { 0x2d, 0xd4 };
 297:Core/Src/rf69.c **** 	setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
 298:Core/Src/rf69.c **** 	// Reasonably fast and reliable default speed and modulation
 299:Core/Src/rf69.c **** 	setModemConfig(GFSK_Rb250Fd250);
 300:Core/Src/rf69.c **** 
 301:Core/Src/rf69.c **** 	// 3 would be sufficient, but this is the same as RF22's
 302:Core/Src/rf69.c **** 	setPreambleLength(4);
 303:Core/Src/rf69.c **** 	// An innocuous ISM frequency, same as RF22's
 304:Core/Src/rf69.c **** 	setFrequency(434.0);
 305:Core/Src/rf69.c **** 	// No encryption
 306:Core/Src/rf69.c **** 	setEncryptionKey(NULL);
 307:Core/Src/rf69.c **** 	// +13dBm, same as power-on default
 308:Core/Src/rf69.c **** 	setTxPower(13, RH_RF69_DEFAULT_HIGHPOWER);
 309:Core/Src/rf69.c **** 
 310:Core/Src/rf69.c **** 	return true;
 311:Core/Src/rf69.c **** }
 312:Core/Src/rf69.c **** 
 313:Core/Src/rf69.c **** // Low level function reads the FIFO and checks the address
 314:Core/Src/rf69.c **** // Caution: since we put our headers in what the RH_RF69 considers to be the payload, if encryption
ARM GAS  /tmp/cciVSvjL.s 			page 15


 315:Core/Src/rf69.c **** // we have to suffer the cost of decryption before we can determine whether the address is acceptab
 316:Core/Src/rf69.c **** // Performance issue?
 317:Core/Src/rf69.c **** void readFifo()
 318:Core/Src/rf69.c **** {
 500              		.loc 1 318 1 is_stmt 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504 0000 70B5     		push	{r4, r5, r6, lr}
 505              		.cfi_def_cfa_offset 16
 506              		.cfi_offset 4, -16
 507              		.cfi_offset 5, -12
 508              		.cfi_offset 6, -8
 509              		.cfi_offset 14, -4
 319:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_RESET);
 510              		.loc 1 319 2 view .LVU98
 511 0002 9020     		movs	r0, #144
 512 0004 0022     		movs	r2, #0
 513 0006 1021     		movs	r1, #16
 514 0008 C005     		lsls	r0, r0, #23
 515 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 516              	.LVL63:
 320:Core/Src/rf69.c **** 	spi_transfer(RH_RF69_REG_00_FIFO); // Send the start address with the write mask off
 517              		.loc 1 320 2 view .LVU99
 518 000e 0020     		movs	r0, #0
 519 0010 FFF7FEFF 		bl	spi_transfer
 520              	.LVL64:
 321:Core/Src/rf69.c **** 	uint8_t payloadlen = spi_transfer(0); // First byte is payload len (counting the headers)
 521              		.loc 1 321 2 view .LVU100
 522              		.loc 1 321 23 is_stmt 0 view .LVU101
 523 0014 0020     		movs	r0, #0
 524 0016 FFF7FEFF 		bl	spi_transfer
 525              	.LVL65:
 526 001a 0500     		movs	r5, r0
 527              	.LVL66:
 322:Core/Src/rf69.c **** 	if (payloadlen <= RH_RF69_MAX_ENCRYPTABLE_PAYLOAD_LEN &&
 528              		.loc 1 322 2 is_stmt 1 view .LVU102
 529              		.loc 1 322 56 is_stmt 0 view .LVU103
 530 001c 031F     		subs	r3, r0, #4
 531 001e DBB2     		uxtb	r3, r3
 532              		.loc 1 322 5 view .LVU104
 533 0020 3C2B     		cmp	r3, #60
 534 0022 06D9     		bls	.L23
 535              	.LVL67:
 536              	.L19:
 323:Core/Src/rf69.c **** 	payloadlen >= RH_RF69_HEADER_LEN)
 324:Core/Src/rf69.c **** 	{
 325:Core/Src/rf69.c **** 	_rxHeaderTo = spi_transfer(0);
 326:Core/Src/rf69.c **** 	// Check addressing
 327:Core/Src/rf69.c **** 	if (_promiscuous ||
 328:Core/Src/rf69.c **** 		_rxHeaderTo == _thisAddress ||
 329:Core/Src/rf69.c **** 		_rxHeaderTo == RH_BROADCAST_ADDRESS)
 330:Core/Src/rf69.c **** 	{
 331:Core/Src/rf69.c **** 		// Get the rest of the headers
 332:Core/Src/rf69.c **** 		_rxHeaderFrom  = spi_transfer(0);
 333:Core/Src/rf69.c **** 		_rxHeaderId    = spi_transfer(0);
 334:Core/Src/rf69.c **** 		_rxHeaderFlags = spi_transfer(0);
ARM GAS  /tmp/cciVSvjL.s 			page 16


 335:Core/Src/rf69.c **** 		// And now the real payload
 336:Core/Src/rf69.c **** 		for (_bufLen = 0; _bufLen < (payloadlen - RH_RF69_HEADER_LEN); _bufLen++)
 337:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 338:Core/Src/rf69.c **** 		_rxGood++;
 339:Core/Src/rf69.c **** 		_rxBufValid = true;
 340:Core/Src/rf69.c **** 	}
 341:Core/Src/rf69.c **** 	}
 342:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 537              		.loc 1 342 2 is_stmt 1 view .LVU105
 538 0024 9020     		movs	r0, #144
 539 0026 0122     		movs	r2, #1
 540 0028 1021     		movs	r1, #16
 541 002a C005     		lsls	r0, r0, #23
 542 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 543              	.LVL68:
 343:Core/Src/rf69.c **** 	// Any junk remaining in the FIFO will be cleared next time we go to receive mode.
 344:Core/Src/rf69.c **** }
 544              		.loc 1 344 1 is_stmt 0 view .LVU106
 545              		@ sp needed
 546 0030 70BD     		pop	{r4, r5, r6, pc}
 547              	.LVL69:
 548              	.L23:
 325:Core/Src/rf69.c **** 	// Check addressing
 549              		.loc 1 325 2 is_stmt 1 view .LVU107
 325:Core/Src/rf69.c **** 	// Check addressing
 550              		.loc 1 325 16 is_stmt 0 view .LVU108
 551 0032 0020     		movs	r0, #0
 552              	.LVL70:
 325:Core/Src/rf69.c **** 	// Check addressing
 553              		.loc 1 325 16 view .LVU109
 554 0034 FFF7FEFF 		bl	spi_transfer
 555              	.LVL71:
 325:Core/Src/rf69.c **** 	// Check addressing
 556              		.loc 1 325 14 discriminator 1 view .LVU110
 557 0038 164A     		ldr	r2, .L24
 558 003a 1070     		strb	r0, [r2]
 327:Core/Src/rf69.c **** 		_rxHeaderTo == _thisAddress ||
 559              		.loc 1 327 2 is_stmt 1 view .LVU111
 327:Core/Src/rf69.c **** 		_rxHeaderTo == _thisAddress ||
 560              		.loc 1 327 19 is_stmt 0 discriminator 1 view .LVU112
 561 003c FF28     		cmp	r0, #255
 562 003e 00D0     		beq	.L20
 328:Core/Src/rf69.c **** 		_rxHeaderTo == RH_BROADCAST_ADDRESS)
 563              		.loc 1 328 31 view .LVU113
 564 0040 F0D1     		bne	.L19
 565              	.L20:
 332:Core/Src/rf69.c **** 		_rxHeaderId    = spi_transfer(0);
 566              		.loc 1 332 3 is_stmt 1 view .LVU114
 332:Core/Src/rf69.c **** 		_rxHeaderId    = spi_transfer(0);
 567              		.loc 1 332 20 is_stmt 0 view .LVU115
 568 0042 0020     		movs	r0, #0
 569 0044 FFF7FEFF 		bl	spi_transfer
 570              	.LVL72:
 332:Core/Src/rf69.c **** 		_rxHeaderId    = spi_transfer(0);
 571              		.loc 1 332 18 discriminator 1 view .LVU116
 572 0048 134B     		ldr	r3, .L24+4
 573 004a 1870     		strb	r0, [r3]
ARM GAS  /tmp/cciVSvjL.s 			page 17


 333:Core/Src/rf69.c **** 		_rxHeaderFlags = spi_transfer(0);
 574              		.loc 1 333 3 is_stmt 1 view .LVU117
 333:Core/Src/rf69.c **** 		_rxHeaderFlags = spi_transfer(0);
 575              		.loc 1 333 20 is_stmt 0 view .LVU118
 576 004c 0020     		movs	r0, #0
 577 004e FFF7FEFF 		bl	spi_transfer
 578              	.LVL73:
 333:Core/Src/rf69.c **** 		_rxHeaderFlags = spi_transfer(0);
 579              		.loc 1 333 18 discriminator 1 view .LVU119
 580 0052 124B     		ldr	r3, .L24+8
 581 0054 1870     		strb	r0, [r3]
 334:Core/Src/rf69.c **** 		// And now the real payload
 582              		.loc 1 334 3 is_stmt 1 view .LVU120
 334:Core/Src/rf69.c **** 		// And now the real payload
 583              		.loc 1 334 20 is_stmt 0 view .LVU121
 584 0056 0020     		movs	r0, #0
 585 0058 FFF7FEFF 		bl	spi_transfer
 586              	.LVL74:
 334:Core/Src/rf69.c **** 		// And now the real payload
 587              		.loc 1 334 18 discriminator 1 view .LVU122
 588 005c 104B     		ldr	r3, .L24+12
 589 005e 1870     		strb	r0, [r3]
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 590              		.loc 1 336 3 is_stmt 1 view .LVU123
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 591              		.loc 1 336 16 is_stmt 0 view .LVU124
 592 0060 104B     		ldr	r3, .L24+16
 593 0062 0022     		movs	r2, #0
 594 0064 1A70     		strb	r2, [r3]
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 595              		.loc 1 336 3 view .LVU125
 596 0066 08E0     		b	.L21
 597              	.L22:
 337:Core/Src/rf69.c **** 		_rxGood++;
 598              		.loc 1 337 3 is_stmt 1 view .LVU126
 337:Core/Src/rf69.c **** 		_rxGood++;
 599              		.loc 1 337 19 is_stmt 0 view .LVU127
 600 0068 0020     		movs	r0, #0
 601 006a FFF7FEFF 		bl	spi_transfer
 602              	.LVL75:
 337:Core/Src/rf69.c **** 		_rxGood++;
 603              		.loc 1 337 17 discriminator 1 view .LVU128
 604 006e 0E4B     		ldr	r3, .L24+20
 605 0070 1855     		strb	r0, [r3, r4]
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 606              		.loc 1 336 73 is_stmt 1 discriminator 3 view .LVU129
 607 0072 0C4A     		ldr	r2, .L24+16
 608 0074 1378     		ldrb	r3, [r2]
 609 0076 0133     		adds	r3, r3, #1
 610 0078 1370     		strb	r3, [r2]
 611              	.L21:
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 612              		.loc 1 336 29 discriminator 1 view .LVU130
 613 007a 0A4B     		ldr	r3, .L24+16
 614 007c 1C78     		ldrb	r4, [r3]
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 615              		.loc 1 336 43 is_stmt 0 discriminator 1 view .LVU131
ARM GAS  /tmp/cciVSvjL.s 			page 18


 616 007e 2B1F     		subs	r3, r5, #4
 336:Core/Src/rf69.c **** 		_buf[_bufLen] = spi_transfer(0);
 617              		.loc 1 336 29 discriminator 1 view .LVU132
 618 0080 9C42     		cmp	r4, r3
 619 0082 F1DB     		blt	.L22
 338:Core/Src/rf69.c **** 		_rxBufValid = true;
 620              		.loc 1 338 3 is_stmt 1 view .LVU133
 338:Core/Src/rf69.c **** 		_rxBufValid = true;
 621              		.loc 1 338 10 is_stmt 0 view .LVU134
 622 0084 094A     		ldr	r2, .L24+24
 623 0086 1388     		ldrh	r3, [r2]
 624 0088 0133     		adds	r3, r3, #1
 625 008a 1380     		strh	r3, [r2]
 339:Core/Src/rf69.c **** 	}
 626              		.loc 1 339 3 is_stmt 1 view .LVU135
 339:Core/Src/rf69.c **** 	}
 627              		.loc 1 339 15 is_stmt 0 view .LVU136
 628 008c 084B     		ldr	r3, .L24+28
 629 008e 0122     		movs	r2, #1
 630 0090 1A70     		strb	r2, [r3]
 631 0092 C7E7     		b	.L19
 632              	.L25:
 633              		.align	2
 634              	.L24:
 635 0094 00000000 		.word	_rxHeaderTo
 636 0098 00000000 		.word	_rxHeaderFrom
 637 009c 00000000 		.word	_rxHeaderId
 638 00a0 00000000 		.word	_rxHeaderFlags
 639 00a4 00000000 		.word	_bufLen
 640 00a8 00000000 		.word	_buf
 641 00ac 00000000 		.word	_rxGood
 642 00b0 00000000 		.word	_rxBufValid
 643              		.cfi_endproc
 644              	.LFE48:
 646              		.section	.text.temperatureRead,"ax",%progbits
 647              		.align	1
 648              		.global	temperatureRead
 649              		.syntax unified
 650              		.code	16
 651              		.thumb_func
 653              	temperatureRead:
 654              	.LFB49:
 345:Core/Src/rf69.c **** 
 346:Core/Src/rf69.c **** int8_t temperatureRead()
 347:Core/Src/rf69.c **** {
 655              		.loc 1 347 1 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659 0000 10B5     		push	{r4, lr}
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 4, -8
 662              		.cfi_offset 14, -4
 348:Core/Src/rf69.c **** 	// Caution: must be ins standby.
 349:Core/Src/rf69.c **** //	  setModeIdle();
 350:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_4E_TEMP1, RH_RF69_TEMP1_TEMPMEASSTART); // Start the measurement
 663              		.loc 1 350 2 view .LVU138
ARM GAS  /tmp/cciVSvjL.s 			page 19


 664 0002 0821     		movs	r1, #8
 665 0004 4E20     		movs	r0, #78
 666 0006 FFF7FEFF 		bl	spiWrite
 667              	.LVL76:
 351:Core/Src/rf69.c **** 	while (spiRead(RH_RF69_REG_4E_TEMP1) & RH_RF69_TEMP1_TEMPMEASRUNNING)
 668              		.loc 1 351 2 view .LVU139
 669              	.L27:
 670              		.loc 1 351 9 discriminator 1 view .LVU140
 671 000a 4E20     		movs	r0, #78
 672 000c FFF7FEFF 		bl	spiRead
 673              	.LVL77:
 674 0010 4007     		lsls	r0, r0, #29
 675 0012 FAD4     		bmi	.L27
 352:Core/Src/rf69.c **** 	; // Wait for the measurement to complete
 353:Core/Src/rf69.c **** 	return 166 - spiRead(RH_RF69_REG_4F_TEMP2); // Very approximate, based on observation
 676              		.loc 1 353 2 view .LVU141
 677              		.loc 1 353 15 is_stmt 0 view .LVU142
 678 0014 4F20     		movs	r0, #79
 679 0016 FFF7FEFF 		bl	spiRead
 680              	.LVL78:
 681              		.loc 1 353 13 discriminator 1 view .LVU143
 682 001a 5A23     		movs	r3, #90
 683 001c 5B42     		rsbs	r3, r3, #0
 684 001e 181A     		subs	r0, r3, r0
 685 0020 40B2     		sxtb	r0, r0
 354:Core/Src/rf69.c **** }
 686              		.loc 1 354 1 view .LVU144
 687              		@ sp needed
 688 0022 10BD     		pop	{r4, pc}
 689              		.cfi_endproc
 690              	.LFE49:
 692              		.global	__aeabi_f2d
 693              		.global	__aeabi_dmul
 694              		.global	__aeabi_ddiv
 695              		.global	__aeabi_d2uiz
 696              		.section	.text.setFrequency,"ax",%progbits
 697              		.align	1
 698              		.global	setFrequency
 699              		.syntax unified
 700              		.code	16
 701              		.thumb_func
 703              	setFrequency:
 704              	.LVL79:
 705              	.LFB50:
 355:Core/Src/rf69.c **** 
 356:Core/Src/rf69.c **** bool setFrequency(float centre)
 357:Core/Src/rf69.c **** {
 706              		.loc 1 357 1 is_stmt 1 view -0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              		.loc 1 357 1 is_stmt 0 view .LVU146
 711 0000 10B5     		push	{r4, lr}
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 4, -8
 714              		.cfi_offset 14, -4
 358:Core/Src/rf69.c **** 	// Frf = FRF / FSTEP
ARM GAS  /tmp/cciVSvjL.s 			page 20


 359:Core/Src/rf69.c **** 	uint32_t frf = (uint32_t)((centre * 1000000.0) / RH_RF69_FSTEP);
 715              		.loc 1 359 2 is_stmt 1 view .LVU147
 716              		.loc 1 359 36 is_stmt 0 view .LVU148
 717 0002 FFF7FEFF 		bl	__aeabi_f2d
 718              	.LVL80:
 719              		.loc 1 359 36 view .LVU149
 720 0006 0022     		movs	r2, #0
 721 0008 0C4B     		ldr	r3, .L30
 722 000a FFF7FEFF 		bl	__aeabi_dmul
 723              	.LVL81:
 724              		.loc 1 359 49 view .LVU150
 725 000e 0022     		movs	r2, #0
 726 0010 0B4B     		ldr	r3, .L30+4
 727 0012 FFF7FEFF 		bl	__aeabi_ddiv
 728              	.LVL82:
 729              		.loc 1 359 11 view .LVU151
 730 0016 FFF7FEFF 		bl	__aeabi_d2uiz
 731              	.LVL83:
 732 001a 0400     		movs	r4, r0
 733              	.LVL84:
 360:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_07_FRFMSB, (frf >> 16) & 0xff);
 734              		.loc 1 360 2 is_stmt 1 view .LVU152
 735              		.loc 1 360 39 is_stmt 0 view .LVU153
 736 001c 010C     		lsrs	r1, r0, #16
 737              		.loc 1 360 2 view .LVU154
 738 001e C9B2     		uxtb	r1, r1
 739 0020 0720     		movs	r0, #7
 740              	.LVL85:
 741              		.loc 1 360 2 view .LVU155
 742 0022 FFF7FEFF 		bl	spiWrite
 743              	.LVL86:
 361:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_08_FRFMID, (frf >> 8) & 0xff);
 744              		.loc 1 361 2 is_stmt 1 view .LVU156
 745              		.loc 1 361 39 is_stmt 0 view .LVU157
 746 0026 210A     		lsrs	r1, r4, #8
 747              		.loc 1 361 2 view .LVU158
 748 0028 C9B2     		uxtb	r1, r1
 749 002a 0820     		movs	r0, #8
 750 002c FFF7FEFF 		bl	spiWrite
 751              	.LVL87:
 362:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_09_FRFLSB, frf & 0xff);
 752              		.loc 1 362 2 is_stmt 1 view .LVU159
 753 0030 E1B2     		uxtb	r1, r4
 754 0032 0920     		movs	r0, #9
 755 0034 FFF7FEFF 		bl	spiWrite
 756              	.LVL88:
 363:Core/Src/rf69.c **** 
 364:Core/Src/rf69.c **** 	// afcPullInRange is not used
 365:Core/Src/rf69.c **** 	//(void)afcPullInRange;
 366:Core/Src/rf69.c **** 	return true;
 757              		.loc 1 366 2 view .LVU160
 367:Core/Src/rf69.c **** }
 758              		.loc 1 367 1 is_stmt 0 view .LVU161
 759 0038 0120     		movs	r0, #1
 760              		@ sp needed
 761              	.LVL89:
 762              		.loc 1 367 1 view .LVU162
ARM GAS  /tmp/cciVSvjL.s 			page 21


 763 003a 10BD     		pop	{r4, pc}
 764              	.L31:
 765              		.align	2
 766              	.L30:
 767 003c 80842E41 		.word	1093567616
 768 0040 80844E40 		.word	1078887552
 769              		.cfi_endproc
 770              	.LFE50:
 772              		.section	.text.rssiRead,"ax",%progbits
 773              		.align	1
 774              		.global	rssiRead
 775              		.syntax unified
 776              		.code	16
 777              		.thumb_func
 779              	rssiRead:
 780              	.LFB51:
 368:Core/Src/rf69.c **** 
 369:Core/Src/rf69.c **** int8_t rssiRead()
 370:Core/Src/rf69.c **** {
 781              		.loc 1 370 1 is_stmt 1 view -0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785 0000 10B5     		push	{r4, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 4, -8
 788              		.cfi_offset 14, -4
 371:Core/Src/rf69.c **** 	// Force a new value to be measured
 372:Core/Src/rf69.c **** 	// Hmmm, this hangs forever!
 373:Core/Src/rf69.c **** #if 0
 374:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_23_RSSICONFIG, RH_RF69_RSSICONFIG_RSSISTART);
 375:Core/Src/rf69.c **** 	while (!(spiRead(RH_RF69_REG_23_RSSICONFIG) & RH_RF69_RSSICONFIG_RSSIDONE))
 376:Core/Src/rf69.c **** 	;
 377:Core/Src/rf69.c **** #endif
 378:Core/Src/rf69.c **** 	return -((int8_t)(spiRead(RH_RF69_REG_24_RSSIVALUE) >> 1));
 789              		.loc 1 378 2 view .LVU164
 790              		.loc 1 378 20 is_stmt 0 view .LVU165
 791 0002 2420     		movs	r0, #36
 792 0004 FFF7FEFF 		bl	spiRead
 793              	.LVL90:
 794              		.loc 1 378 11 discriminator 1 view .LVU166
 795 0008 4008     		lsrs	r0, r0, #1
 796 000a C0B2     		uxtb	r0, r0
 797              		.loc 1 378 9 discriminator 1 view .LVU167
 798 000c 4042     		rsbs	r0, r0, #0
 799 000e 40B2     		sxtb	r0, r0
 379:Core/Src/rf69.c **** }
 800              		.loc 1 379 1 view .LVU168
 801              		@ sp needed
 802 0010 10BD     		pop	{r4, pc}
 803              		.cfi_endproc
 804              	.LFE51:
 806              		.section	.text.setOpMode,"ax",%progbits
 807              		.align	1
 808              		.global	setOpMode
 809              		.syntax unified
 810              		.code	16
ARM GAS  /tmp/cciVSvjL.s 			page 22


 811              		.thumb_func
 813              	setOpMode:
 814              	.LVL91:
 815              	.LFB52:
 380:Core/Src/rf69.c **** 
 381:Core/Src/rf69.c **** void setOpMode(uint8_t mode)
 382:Core/Src/rf69.c **** {
 816              		.loc 1 382 1 is_stmt 1 view -0
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 820              		.loc 1 382 1 is_stmt 0 view .LVU170
 821 0000 10B5     		push	{r4, lr}
 822              		.cfi_def_cfa_offset 8
 823              		.cfi_offset 4, -8
 824              		.cfi_offset 14, -4
 825 0002 0400     		movs	r4, r0
 383:Core/Src/rf69.c **** 	uint8_t opmode = spiRead(RH_RF69_REG_01_OPMODE);
 826              		.loc 1 383 2 is_stmt 1 view .LVU171
 827              		.loc 1 383 19 is_stmt 0 view .LVU172
 828 0004 0120     		movs	r0, #1
 829              	.LVL92:
 830              		.loc 1 383 19 view .LVU173
 831 0006 FFF7FEFF 		bl	spiRead
 832              	.LVL93:
 384:Core/Src/rf69.c **** 	opmode &= ~RH_RF69_OPMODE_MODE;
 833              		.loc 1 384 2 is_stmt 1 view .LVU174
 834              		.loc 1 384 9 is_stmt 0 view .LVU175
 835 000a 1C23     		movs	r3, #28
 836 000c 0100     		movs	r1, r0
 837 000e 9943     		bics	r1, r3
 838 0010 C9B2     		uxtb	r1, r1
 839              	.LVL94:
 385:Core/Src/rf69.c **** 	opmode |= (mode & RH_RF69_OPMODE_MODE);
 840              		.loc 1 385 2 is_stmt 1 view .LVU176
 386:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_01_OPMODE, opmode);
 841              		.loc 1 386 2 view .LVU177
 842 0012 1C20     		movs	r0, #28
 843 0014 2040     		ands	r0, r4
 844 0016 0143     		orrs	r1, r0
 845              	.LVL95:
 846              		.loc 1 386 2 is_stmt 0 view .LVU178
 847 0018 0120     		movs	r0, #1
 848 001a FFF7FEFF 		bl	spiWrite
 849              	.LVL96:
 387:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "setOpMode=%x", opmode);
 388:Core/Src/rf69.c **** 
 389:Core/Src/rf69.c **** 	// Wait for mode to change.
 390:Core/Src/rf69.c **** 	while (!(spiRead(RH_RF69_REG_27_IRQFLAGS1) & RH_RF69_IRQFLAGS1_MODEREADY))
 850              		.loc 1 390 2 is_stmt 1 view .LVU179
 851              	.L34:
 852              		.loc 1 390 9 discriminator 1 view .LVU180
 853              		.loc 1 390 11 is_stmt 0 discriminator 1 view .LVU181
 854 001e 2720     		movs	r0, #39
 855 0020 FFF7FEFF 		bl	spiRead
 856              	.LVL97:
 857              		.loc 1 390 9 discriminator 1 view .LVU182
ARM GAS  /tmp/cciVSvjL.s 			page 23


 858 0024 0006     		lsls	r0, r0, #24
 859 0026 FAD5     		bpl	.L34
 391:Core/Src/rf69.c **** 	;
 392:Core/Src/rf69.c **** 
 393:Core/Src/rf69.c **** 	// Verify new mode
 394:Core/Src/rf69.c **** 	uint8_t _opmode = spiRead(RH_RF69_REG_01_OPMODE);
 860              		.loc 1 394 2 is_stmt 1 view .LVU183
 861              		.loc 1 394 20 is_stmt 0 view .LVU184
 862 0028 0120     		movs	r0, #1
 863 002a FFF7FEFF 		bl	spiRead
 864              	.LVL98:
 395:Core/Src/rf69.c **** 	if (opmode != _opmode) {
 865              		.loc 1 395 2 is_stmt 1 view .LVU185
 396:Core/Src/rf69.c **** 		//ESP_LOGE(TAG, "setOpMode fail. %x %x", opmode, _opmode);
 397:Core/Src/rf69.c **** 	}
 866              		.loc 1 397 2 view .LVU186
 398:Core/Src/rf69.c **** }
 867              		.loc 1 398 1 is_stmt 0 view .LVU187
 868              		@ sp needed
 869              	.LVL99:
 870              		.loc 1 398 1 view .LVU188
 871 002e 10BD     		pop	{r4, pc}
 872              		.cfi_endproc
 873              	.LFE52:
 875              		.section	.text.setModeIdle,"ax",%progbits
 876              		.align	1
 877              		.global	setModeIdle
 878              		.syntax unified
 879              		.code	16
 880              		.thumb_func
 882              	setModeIdle:
 883              	.LFB53:
 399:Core/Src/rf69.c **** 
 400:Core/Src/rf69.c **** void setModeIdle()
 401:Core/Src/rf69.c **** {
 884              		.loc 1 401 1 is_stmt 1 view -0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888 0000 10B5     		push	{r4, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 4, -8
 891              		.cfi_offset 14, -4
 402:Core/Src/rf69.c **** 	if (_mode != RHModeIdle)
 892              		.loc 1 402 2 view .LVU190
 893              		.loc 1 402 12 is_stmt 0 view .LVU191
 894 0002 0D4B     		ldr	r3, .L40
 895 0004 1B78     		ldrb	r3, [r3]
 896              		.loc 1 402 5 view .LVU192
 897 0006 022B     		cmp	r3, #2
 898 0008 0BD0     		beq	.L36
 403:Core/Src/rf69.c **** 	{
 404:Core/Src/rf69.c **** 	if (_power >= 18)
 899              		.loc 1 404 2 is_stmt 1 view .LVU193
 900              		.loc 1 404 13 is_stmt 0 view .LVU194
 901 000a 0C4B     		ldr	r3, .L40+4
 902 000c 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/cciVSvjL.s 			page 24


 903 000e 5BB2     		sxtb	r3, r3
 904              		.loc 1 404 5 view .LVU195
 905 0010 112B     		cmp	r3, #17
 906 0012 07DC     		bgt	.L39
 907              	.L38:
 405:Core/Src/rf69.c **** 	{
 406:Core/Src/rf69.c **** 		// If high power boost, return power amp to receive mode
 407:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 408:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 409:Core/Src/rf69.c **** 	}
 410:Core/Src/rf69.c **** 	setOpMode(_idleMode);
 908              		.loc 1 410 2 is_stmt 1 view .LVU196
 909 0014 0A4B     		ldr	r3, .L40+8
 910 0016 1878     		ldrb	r0, [r3]
 911 0018 FFF7FEFF 		bl	setOpMode
 912              	.LVL100:
 411:Core/Src/rf69.c **** 	_mode = RHModeIdle;
 913              		.loc 1 411 2 view .LVU197
 914              		.loc 1 411 8 is_stmt 0 view .LVU198
 915 001c 064B     		ldr	r3, .L40
 916 001e 0222     		movs	r2, #2
 917 0020 1A70     		strb	r2, [r3]
 918              	.L36:
 412:Core/Src/rf69.c **** 	}
 413:Core/Src/rf69.c **** }
 919              		.loc 1 413 1 view .LVU199
 920              		@ sp needed
 921 0022 10BD     		pop	{r4, pc}
 922              	.L39:
 407:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 923              		.loc 1 407 3 is_stmt 1 view .LVU200
 924 0024 5521     		movs	r1, #85
 925 0026 5A20     		movs	r0, #90
 926 0028 FFF7FEFF 		bl	spiWrite
 927              	.LVL101:
 408:Core/Src/rf69.c **** 	}
 928              		.loc 1 408 3 view .LVU201
 929 002c 7021     		movs	r1, #112
 930 002e 5C20     		movs	r0, #92
 931 0030 FFF7FEFF 		bl	spiWrite
 932              	.LVL102:
 933 0034 EEE7     		b	.L38
 934              	.L41:
 935 0036 C046     		.align	2
 936              	.L40:
 937 0038 00000000 		.word	_mode
 938 003c 00000000 		.word	_power
 939 0040 00000000 		.word	_idleMode
 940              		.cfi_endproc
 941              	.LFE53:
 943              		.section	.text.setSleep,"ax",%progbits
 944              		.align	1
 945              		.global	setSleep
 946              		.syntax unified
 947              		.code	16
 948              		.thumb_func
 950              	setSleep:
ARM GAS  /tmp/cciVSvjL.s 			page 25


 951              	.LFB54:
 414:Core/Src/rf69.c **** 
 415:Core/Src/rf69.c **** bool setSleep()
 416:Core/Src/rf69.c **** {
 952              		.loc 1 416 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956 0000 10B5     		push	{r4, lr}
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 4, -8
 959              		.cfi_offset 14, -4
 417:Core/Src/rf69.c **** 	if (_mode != RHModeSleep)
 960              		.loc 1 417 2 view .LVU203
 961              		.loc 1 417 12 is_stmt 0 view .LVU204
 962 0002 074B     		ldr	r3, .L45
 963 0004 1B78     		ldrb	r3, [r3]
 964              		.loc 1 417 5 view .LVU205
 965 0006 012B     		cmp	r3, #1
 966 0008 01D1     		bne	.L44
 967              	.L43:
 418:Core/Src/rf69.c **** 	{
 419:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_01_OPMODE, RH_RF69_OPMODE_MODE_SLEEP);
 420:Core/Src/rf69.c **** 	_mode = RHModeSleep;
 421:Core/Src/rf69.c **** 	}
 422:Core/Src/rf69.c **** 	return true;
 968              		.loc 1 422 2 is_stmt 1 view .LVU206
 423:Core/Src/rf69.c **** }
 969              		.loc 1 423 1 is_stmt 0 view .LVU207
 970 000a 0120     		movs	r0, #1
 971              		@ sp needed
 972 000c 10BD     		pop	{r4, pc}
 973              	.L44:
 419:Core/Src/rf69.c **** 	_mode = RHModeSleep;
 974              		.loc 1 419 2 is_stmt 1 view .LVU208
 975 000e 0021     		movs	r1, #0
 976 0010 0120     		movs	r0, #1
 977 0012 FFF7FEFF 		bl	spiWrite
 978              	.LVL103:
 420:Core/Src/rf69.c **** 	}
 979              		.loc 1 420 2 view .LVU209
 420:Core/Src/rf69.c **** 	}
 980              		.loc 1 420 8 is_stmt 0 view .LVU210
 981 0016 024B     		ldr	r3, .L45
 982 0018 0122     		movs	r2, #1
 983 001a 1A70     		strb	r2, [r3]
 984 001c F5E7     		b	.L43
 985              	.L46:
 986 001e C046     		.align	2
 987              	.L45:
 988 0020 00000000 		.word	_mode
 989              		.cfi_endproc
 990              	.LFE54:
 992              		.section	.text.setModeRx,"ax",%progbits
 993              		.align	1
 994              		.global	setModeRx
 995              		.syntax unified
ARM GAS  /tmp/cciVSvjL.s 			page 26


 996              		.code	16
 997              		.thumb_func
 999              	setModeRx:
 1000              	.LFB55:
 424:Core/Src/rf69.c **** 
 425:Core/Src/rf69.c **** void setModeRx()
 426:Core/Src/rf69.c **** {
 1001              		.loc 1 426 1 is_stmt 1 view -0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005 0000 10B5     		push	{r4, lr}
 1006              		.cfi_def_cfa_offset 8
 1007              		.cfi_offset 4, -8
 1008              		.cfi_offset 14, -4
 427:Core/Src/rf69.c **** 	if (_mode != RHModeRx)
 1009              		.loc 1 427 2 view .LVU212
 1010              		.loc 1 427 12 is_stmt 0 view .LVU213
 1011 0002 0E4B     		ldr	r3, .L51
 1012 0004 1B78     		ldrb	r3, [r3]
 1013              		.loc 1 427 5 view .LVU214
 1014 0006 042B     		cmp	r3, #4
 1015 0008 0ED0     		beq	.L47
 428:Core/Src/rf69.c **** 	{
 429:Core/Src/rf69.c **** 	if (_power >= 18)
 1016              		.loc 1 429 2 is_stmt 1 view .LVU215
 1017              		.loc 1 429 13 is_stmt 0 view .LVU216
 1018 000a 0D4B     		ldr	r3, .L51+4
 1019 000c 1B78     		ldrb	r3, [r3]
 1020 000e 5BB2     		sxtb	r3, r3
 1021              		.loc 1 429 5 view .LVU217
 1022 0010 112B     		cmp	r3, #17
 1023 0012 0ADC     		bgt	.L50
 1024              	.L49:
 430:Core/Src/rf69.c **** 	{
 431:Core/Src/rf69.c **** 		// If high power boost, return power amp to receive mode
 432:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 433:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 434:Core/Src/rf69.c **** 	}
 435:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_25_DIOMAPPING1, RH_RF69_DIOMAPPING1_DIO0MAPPING_01); // Set interrupt line 0 
 1025              		.loc 1 435 2 is_stmt 1 view .LVU218
 1026 0014 4021     		movs	r1, #64
 1027 0016 2520     		movs	r0, #37
 1028 0018 FFF7FEFF 		bl	spiWrite
 1029              	.LVL104:
 436:Core/Src/rf69.c **** 	setOpMode(RH_RF69_OPMODE_MODE_RX); // Clears FIFO
 1030              		.loc 1 436 2 view .LVU219
 1031 001c 1020     		movs	r0, #16
 1032 001e FFF7FEFF 		bl	setOpMode
 1033              	.LVL105:
 437:Core/Src/rf69.c **** 	_mode = RHModeRx;
 1034              		.loc 1 437 2 view .LVU220
 1035              		.loc 1 437 8 is_stmt 0 view .LVU221
 1036 0022 064B     		ldr	r3, .L51
 1037 0024 0422     		movs	r2, #4
 1038 0026 1A70     		strb	r2, [r3]
 1039              	.L47:
ARM GAS  /tmp/cciVSvjL.s 			page 27


 438:Core/Src/rf69.c **** 	}
 439:Core/Src/rf69.c **** }
 1040              		.loc 1 439 1 view .LVU222
 1041              		@ sp needed
 1042 0028 10BD     		pop	{r4, pc}
 1043              	.L50:
 432:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 1044              		.loc 1 432 3 is_stmt 1 view .LVU223
 1045 002a 5521     		movs	r1, #85
 1046 002c 5A20     		movs	r0, #90
 1047 002e FFF7FEFF 		bl	spiWrite
 1048              	.LVL106:
 433:Core/Src/rf69.c **** 	}
 1049              		.loc 1 433 3 view .LVU224
 1050 0032 7021     		movs	r1, #112
 1051 0034 5C20     		movs	r0, #92
 1052 0036 FFF7FEFF 		bl	spiWrite
 1053              	.LVL107:
 1054 003a EBE7     		b	.L49
 1055              	.L52:
 1056              		.align	2
 1057              	.L51:
 1058 003c 00000000 		.word	_mode
 1059 0040 00000000 		.word	_power
 1060              		.cfi_endproc
 1061              	.LFE55:
 1063              		.section	.text.setModeTx,"ax",%progbits
 1064              		.align	1
 1065              		.global	setModeTx
 1066              		.syntax unified
 1067              		.code	16
 1068              		.thumb_func
 1070              	setModeTx:
 1071              	.LFB56:
 440:Core/Src/rf69.c **** 
 441:Core/Src/rf69.c **** void setModeTx()
 442:Core/Src/rf69.c **** {
 1072              		.loc 1 442 1 view -0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 0
 1075              		@ frame_needed = 0, uses_anonymous_args = 0
 1076 0000 10B5     		push	{r4, lr}
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 4, -8
 1079              		.cfi_offset 14, -4
 443:Core/Src/rf69.c **** 	if (_mode != RHModeTx)
 1080              		.loc 1 443 2 view .LVU226
 1081              		.loc 1 443 12 is_stmt 0 view .LVU227
 1082 0002 0E4B     		ldr	r3, .L57
 1083 0004 1B78     		ldrb	r3, [r3]
 1084              		.loc 1 443 5 view .LVU228
 1085 0006 032B     		cmp	r3, #3
 1086 0008 0ED0     		beq	.L53
 444:Core/Src/rf69.c **** 	{
 445:Core/Src/rf69.c **** 	if (_power >= 18)
 1087              		.loc 1 445 2 is_stmt 1 view .LVU229
 1088              		.loc 1 445 13 is_stmt 0 view .LVU230
ARM GAS  /tmp/cciVSvjL.s 			page 28


 1089 000a 0D4B     		ldr	r3, .L57+4
 1090 000c 1B78     		ldrb	r3, [r3]
 1091 000e 5BB2     		sxtb	r3, r3
 1092              		.loc 1 445 5 view .LVU231
 1093 0010 112B     		cmp	r3, #17
 1094 0012 0ADC     		bgt	.L56
 1095              	.L55:
 446:Core/Src/rf69.c **** 	{
 447:Core/Src/rf69.c **** 		// Set high power boost mode
 448:Core/Src/rf69.c **** 		// Note that OCP defaults to ON so no need to change that.
 449:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_BOOST);
 450:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_BOOST);
 451:Core/Src/rf69.c **** 	}
 452:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_25_DIOMAPPING1, RH_RF69_DIOMAPPING1_DIO0MAPPING_00); // Set interrupt line 0 
 1096              		.loc 1 452 2 is_stmt 1 view .LVU232
 1097 0014 0021     		movs	r1, #0
 1098 0016 2520     		movs	r0, #37
 1099 0018 FFF7FEFF 		bl	spiWrite
 1100              	.LVL108:
 453:Core/Src/rf69.c **** 	setOpMode(RH_RF69_OPMODE_MODE_TX); // Clears FIFO
 1101              		.loc 1 453 2 view .LVU233
 1102 001c 0C20     		movs	r0, #12
 1103 001e FFF7FEFF 		bl	setOpMode
 1104              	.LVL109:
 454:Core/Src/rf69.c **** 	_mode = RHModeTx;
 1105              		.loc 1 454 2 view .LVU234
 1106              		.loc 1 454 8 is_stmt 0 view .LVU235
 1107 0022 064B     		ldr	r3, .L57
 1108 0024 0322     		movs	r2, #3
 1109 0026 1A70     		strb	r2, [r3]
 1110              	.L53:
 455:Core/Src/rf69.c **** 	}
 456:Core/Src/rf69.c **** }
 1111              		.loc 1 456 1 view .LVU236
 1112              		@ sp needed
 1113 0028 10BD     		pop	{r4, pc}
 1114              	.L56:
 449:Core/Src/rf69.c **** 		spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_BOOST);
 1115              		.loc 1 449 3 is_stmt 1 view .LVU237
 1116 002a 5D21     		movs	r1, #93
 1117 002c 5A20     		movs	r0, #90
 1118 002e FFF7FEFF 		bl	spiWrite
 1119              	.LVL110:
 450:Core/Src/rf69.c **** 	}
 1120              		.loc 1 450 3 view .LVU238
 1121 0032 7C21     		movs	r1, #124
 1122 0034 5C20     		movs	r0, #92
 1123 0036 FFF7FEFF 		bl	spiWrite
 1124              	.LVL111:
 1125 003a EBE7     		b	.L55
 1126              	.L58:
 1127              		.align	2
 1128              	.L57:
 1129 003c 00000000 		.word	_mode
 1130 0040 00000000 		.word	_power
 1131              		.cfi_endproc
 1132              	.LFE56:
ARM GAS  /tmp/cciVSvjL.s 			page 29


 1134              		.section	.text.setTxPower,"ax",%progbits
 1135              		.align	1
 1136              		.global	setTxPower
 1137              		.syntax unified
 1138              		.code	16
 1139              		.thumb_func
 1141              	setTxPower:
 1142              	.LVL112:
 1143              	.LFB57:
 457:Core/Src/rf69.c **** 
 458:Core/Src/rf69.c **** void setTxPower(int8_t power, bool ishighpowermodule)
 459:Core/Src/rf69.c **** {
 1144              		.loc 1 459 1 view -0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              		.loc 1 459 1 is_stmt 0 view .LVU240
 1149 0000 10B5     		push	{r4, lr}
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 4, -8
 1152              		.cfi_offset 14, -4
 460:Core/Src/rf69.c ****   _power = power;
 1153              		.loc 1 460 3 is_stmt 1 view .LVU241
 1154              		.loc 1 460 10 is_stmt 0 view .LVU242
 1155 0002 1F4B     		ldr	r3, .L69
 1156 0004 1870     		strb	r0, [r3]
 461:Core/Src/rf69.c ****   uint8_t palevel;
 1157              		.loc 1 461 3 is_stmt 1 view .LVU243
 462:Core/Src/rf69.c **** 
 463:Core/Src/rf69.c ****   if (ishighpowermodule)
 1158              		.loc 1 463 3 view .LVU244
 1159              		.loc 1 463 6 is_stmt 0 view .LVU245
 1160 0006 0029     		cmp	r1, #0
 1161 0008 1FD0     		beq	.L60
 464:Core/Src/rf69.c ****   {
 465:Core/Src/rf69.c **** 	if (_power < -2)
 1162              		.loc 1 465 2 is_stmt 1 view .LVU246
 1163              		.loc 1 465 5 is_stmt 0 view .LVU247
 1164 000a 0230     		adds	r0, r0, #2
 1165 000c 01DA     		bge	.L61
 1166              	.LVL113:
 466:Core/Src/rf69.c **** 	  _power = -2; //RFM69HW only works down to -2.
 1167              		.loc 1 466 4 is_stmt 1 view .LVU248
 1168              		.loc 1 466 11 is_stmt 0 view .LVU249
 1169 000e FE22     		movs	r2, #254
 1170 0010 1A70     		strb	r2, [r3]
 1171              	.LVL114:
 1172              	.L61:
 467:Core/Src/rf69.c **** 	if (_power <= 13)
 1173              		.loc 1 467 2 is_stmt 1 view .LVU250
 1174              		.loc 1 467 13 is_stmt 0 view .LVU251
 1175 0012 1B4B     		ldr	r3, .L69
 1176 0014 0021     		movs	r1, #0
 1177              	.LVL115:
 1178              		.loc 1 467 13 view .LVU252
 1179 0016 5956     		ldrsb	r1, [r3, r1]
 1180              		.loc 1 467 5 view .LVU253
ARM GAS  /tmp/cciVSvjL.s 			page 30


 1181 0018 0D29     		cmp	r1, #13
 1182 001a 06DC     		bgt	.L62
 468:Core/Src/rf69.c **** 	{
 469:Core/Src/rf69.c **** 	  // -2dBm to +13dBm
 470:Core/Src/rf69.c **** 	  //Need PA1 exclusivelly on RFM69HW
 471:Core/Src/rf69.c **** 	  palevel = RH_RF69_PALEVEL_PA1ON | ((_power + 18) &
 1183              		.loc 1 471 4 is_stmt 1 view .LVU254
 1184              		.loc 1 471 47 is_stmt 0 view .LVU255
 1185 001c 1231     		adds	r1, r1, #18
 1186 001e 1F23     		movs	r3, #31
 1187 0020 1940     		ands	r1, r3
 1188 0022 4023     		movs	r3, #64
 1189 0024 1943     		orrs	r1, r3
 1190 0026 C9B2     		uxtb	r1, r1
 1191              	.LVL116:
 1192              		.loc 1 471 47 view .LVU256
 1193 0028 25E0     		b	.L63
 1194              	.LVL117:
 1195              	.L62:
 472:Core/Src/rf69.c **** 	  RH_RF69_PALEVEL_OUTPUTPOWER);
 473:Core/Src/rf69.c **** 	}
 474:Core/Src/rf69.c **** 	else if (_power >= 18)
 1196              		.loc 1 474 7 is_stmt 1 view .LVU257
 1197              		.loc 1 474 10 is_stmt 0 view .LVU258
 1198 002a 1129     		cmp	r1, #17
 1199 002c 06DD     		ble	.L64
 475:Core/Src/rf69.c **** 	{
 476:Core/Src/rf69.c **** 	  // +18dBm to +20dBm
 477:Core/Src/rf69.c **** 	  // Need PA1+PA2
 478:Core/Src/rf69.c **** 	  // Also need PA boost settings change when tx is turned on and off, see setModeTx()
 479:Core/Src/rf69.c **** 	  palevel = RH_RF69_PALEVEL_PA1ON
 1200              		.loc 1 479 4 is_stmt 1 view .LVU259
 480:Core/Src/rf69.c **** 	| RH_RF69_PALEVEL_PA2ON
 481:Core/Src/rf69.c **** 	| ((_power + 11) & RH_RF69_PALEVEL_OUTPUTPOWER);
 1201              		.loc 1 481 13 is_stmt 0 view .LVU260
 1202 002e 0B31     		adds	r1, r1, #11
 1203 0030 1F23     		movs	r3, #31
 1204 0032 1940     		ands	r1, r3
 1205 0034 6023     		movs	r3, #96
 1206 0036 1943     		orrs	r1, r3
 1207 0038 C9B2     		uxtb	r1, r1
 1208              	.LVL118:
 1209              		.loc 1 481 13 view .LVU261
 1210 003a 1CE0     		b	.L63
 1211              	.LVL119:
 1212              	.L64:
 482:Core/Src/rf69.c **** 	}
 483:Core/Src/rf69.c **** 	else
 484:Core/Src/rf69.c **** 	{
 485:Core/Src/rf69.c **** 	  // +14dBm to +17dBm
 486:Core/Src/rf69.c **** 	  // Need PA1+PA2
 487:Core/Src/rf69.c **** 	  palevel = RH_RF69_PALEVEL_PA1ON
 1213              		.loc 1 487 4 is_stmt 1 view .LVU262
 488:Core/Src/rf69.c **** 	| RH_RF69_PALEVEL_PA2ON
 489:Core/Src/rf69.c **** 	| ((_power + 14) & RH_RF69_PALEVEL_OUTPUTPOWER);
 1214              		.loc 1 489 13 is_stmt 0 view .LVU263
 1215 003c 0E31     		adds	r1, r1, #14
ARM GAS  /tmp/cciVSvjL.s 			page 31


 1216 003e 1F23     		movs	r3, #31
 1217 0040 1940     		ands	r1, r3
 1218 0042 6023     		movs	r3, #96
 1219 0044 1943     		orrs	r1, r3
 1220 0046 C9B2     		uxtb	r1, r1
 1221              	.LVL120:
 1222              		.loc 1 489 13 view .LVU264
 1223 0048 15E0     		b	.L63
 1224              	.LVL121:
 1225              	.L60:
 490:Core/Src/rf69.c **** 	}
 491:Core/Src/rf69.c ****   }
 492:Core/Src/rf69.c ****   else
 493:Core/Src/rf69.c ****   {
 494:Core/Src/rf69.c **** 	if (_power < -18) _power = -18;
 1226              		.loc 1 494 2 is_stmt 1 view .LVU265
 1227              		.loc 1 494 5 is_stmt 0 view .LVU266
 1228 004a 1230     		adds	r0, r0, #18
 1229 004c 02DA     		bge	.L65
 1230              	.LVL122:
 1231              		.loc 1 494 20 is_stmt 1 discriminator 1 view .LVU267
 1232              		.loc 1 494 27 is_stmt 0 discriminator 1 view .LVU268
 1233 004e 0C4B     		ldr	r3, .L69
 1234              		.loc 1 494 27 discriminator 1 view .LVU269
 1235 0050 EE22     		movs	r2, #238
 1236 0052 1A70     		strb	r2, [r3]
 1237              	.LVL123:
 1238              	.L65:
 495:Core/Src/rf69.c **** 	if (_power > 13) _power = 13; //limit for RFM69W
 1239              		.loc 1 495 2 is_stmt 1 view .LVU270
 1240              		.loc 1 495 13 is_stmt 0 view .LVU271
 1241 0054 0A4B     		ldr	r3, .L69
 1242 0056 1B78     		ldrb	r3, [r3]
 1243 0058 5BB2     		sxtb	r3, r3
 1244              		.loc 1 495 5 view .LVU272
 1245 005a 0D2B     		cmp	r3, #13
 1246 005c 02DD     		ble	.L66
 1247              		.loc 1 495 19 is_stmt 1 discriminator 1 view .LVU273
 1248              		.loc 1 495 26 is_stmt 0 discriminator 1 view .LVU274
 1249 005e 084B     		ldr	r3, .L69
 1250 0060 0D22     		movs	r2, #13
 1251 0062 1A70     		strb	r2, [r3]
 1252              	.L66:
 496:Core/Src/rf69.c **** 	palevel = RH_RF69_PALEVEL_PA0ON
 1253              		.loc 1 496 2 is_stmt 1 view .LVU275
 497:Core/Src/rf69.c **** 	  | ((_power + 18) & RH_RF69_PALEVEL_OUTPUTPOWER);
 1254              		.loc 1 497 15 is_stmt 0 view .LVU276
 1255 0064 064B     		ldr	r3, .L69
 1256 0066 1B78     		ldrb	r3, [r3]
 1257 0068 1233     		adds	r3, r3, #18
 1258 006a 1F22     		movs	r2, #31
 1259 006c 1340     		ands	r3, r2
 1260 006e 8021     		movs	r1, #128
 1261              	.LVL124:
 1262              		.loc 1 497 15 view .LVU277
 1263 0070 4942     		rsbs	r1, r1, #0
 1264 0072 1943     		orrs	r1, r3
ARM GAS  /tmp/cciVSvjL.s 			page 32


 1265 0074 C9B2     		uxtb	r1, r1
 1266              	.LVL125:
 1267              	.L63:
 498:Core/Src/rf69.c ****   }
 499:Core/Src/rf69.c ****   spiWrite(RH_RF69_REG_11_PALEVEL, palevel);
 1268              		.loc 1 499 3 is_stmt 1 view .LVU278
 1269 0076 1120     		movs	r0, #17
 1270 0078 FFF7FEFF 		bl	spiWrite
 1271              	.LVL126:
 500:Core/Src/rf69.c **** }
 1272              		.loc 1 500 1 is_stmt 0 view .LVU279
 1273              		@ sp needed
 1274 007c 10BD     		pop	{r4, pc}
 1275              	.L70:
 1276 007e C046     		.align	2
 1277              	.L69:
 1278 0080 00000000 		.word	_power
 1279              		.cfi_endproc
 1280              	.LFE57:
 1282              		.section	.text.setModemRegisters,"ax",%progbits
 1283              		.align	1
 1284              		.global	setModemRegisters
 1285              		.syntax unified
 1286              		.code	16
 1287              		.thumb_func
 1289              	setModemRegisters:
 1290              	.LVL127:
 1291              	.LFB58:
 501:Core/Src/rf69.c **** 
 502:Core/Src/rf69.c **** // Sets registers from a canned modem configuration structure
 503:Core/Src/rf69.c **** void setModemRegisters(const ModemConfig* config)
 504:Core/Src/rf69.c **** {
 1292              		.loc 1 504 1 is_stmt 1 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 1296              		.loc 1 504 1 is_stmt 0 view .LVU281
 1297 0000 10B5     		push	{r4, lr}
 1298              		.cfi_def_cfa_offset 8
 1299              		.cfi_offset 4, -8
 1300              		.cfi_offset 14, -4
 1301 0002 0400     		movs	r4, r0
 505:Core/Src/rf69.c **** 	spiBurstWrite(RH_RF69_REG_02_DATAMODUL,		&config->reg_02, 5);
 1302              		.loc 1 505 2 is_stmt 1 view .LVU282
 1303 0004 0522     		movs	r2, #5
 1304 0006 0100     		movs	r1, r0
 1305 0008 0220     		movs	r0, #2
 1306              	.LVL128:
 1307              		.loc 1 505 2 is_stmt 0 view .LVU283
 1308 000a FFF7FEFF 		bl	spiBurstWrite
 1309              	.LVL129:
 506:Core/Src/rf69.c **** 	spiBurstWrite(RH_RF69_REG_19_RXBW,			&config->reg_19, 2);
 1310              		.loc 1 506 2 is_stmt 1 view .LVU284
 1311 000e 611D     		adds	r1, r4, #5
 1312 0010 0222     		movs	r2, #2
 1313 0012 1920     		movs	r0, #25
 1314 0014 FFF7FEFF 		bl	spiBurstWrite
ARM GAS  /tmp/cciVSvjL.s 			page 33


 1315              	.LVL130:
 507:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_37_PACKETCONFIG1,		 config->reg_37);
 1316              		.loc 1 507 2 view .LVU285
 1317              		.loc 1 507 49 is_stmt 0 view .LVU286
 1318 0018 E179     		ldrb	r1, [r4, #7]
 1319              		.loc 1 507 2 view .LVU287
 1320 001a 3720     		movs	r0, #55
 1321 001c FFF7FEFF 		bl	spiWrite
 1322              	.LVL131:
 508:Core/Src/rf69.c **** 
 509:Core/Src/rf69.c **** #if 0
 510:Core/Src/rf69.c **** 	uint8_t dest[8];
 511:Core/Src/rf69.c **** 	spiBurstRead(RH_RF69_REG_02_DATAMODUL, dest, 5);
 512:Core/Src/rf69.c **** 	for (int i=0;i<5;i++) {
 513:Core/Src/rf69.c **** 		//ESP_LOGI(TAG, "RH_RF69_REG_02_DATAMODUL[%d]=%x", i, dest[i]);
 514:Core/Src/rf69.c **** 	}
 515:Core/Src/rf69.c **** 
 516:Core/Src/rf69.c **** 	spiBurstRead(RH_RF69_REG_19_RXBW, dest, 2);
 517:Core/Src/rf69.c **** 	for (int i=0;i<2;i++) {
 518:Core/Src/rf69.c **** 		//ESP_LOGI(TAG, "RH_RF69_REG_19_RXBW[%d]=%x", i, dest[i]);
 519:Core/Src/rf69.c **** 	}
 520:Core/Src/rf69.c **** #endif
 521:Core/Src/rf69.c **** }
 1323              		.loc 1 521 1 view .LVU288
 1324              		@ sp needed
 1325              	.LVL132:
 1326              		.loc 1 521 1 view .LVU289
 1327 0020 10BD     		pop	{r4, pc}
 1328              		.cfi_endproc
 1329              	.LFE58:
 1331              		.section	.text.setModemConfig,"ax",%progbits
 1332              		.align	1
 1333              		.global	setModemConfig
 1334              		.syntax unified
 1335              		.code	16
 1336              		.thumb_func
 1338              	setModemConfig:
 1339              	.LVL133:
 1340              	.LFB59:
 522:Core/Src/rf69.c **** 
 523:Core/Src/rf69.c **** // Set one of the canned FSK Modem configs
 524:Core/Src/rf69.c **** // Returns true if its a valid choice
 525:Core/Src/rf69.c **** bool setModemConfig(ModemConfigChoice index)
 526:Core/Src/rf69.c **** {
 1341              		.loc 1 526 1 is_stmt 1 view -0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 8
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
 1345              		.loc 1 526 1 is_stmt 0 view .LVU291
 1346 0000 00B5     		push	{lr}
 1347              		.cfi_def_cfa_offset 4
 1348              		.cfi_offset 14, -4
 1349 0002 83B0     		sub	sp, sp, #12
 1350              		.cfi_def_cfa_offset 16
 527:Core/Src/rf69.c **** 	if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 1351              		.loc 1 527 2 is_stmt 1 view .LVU292
 1352              		.loc 1 527 5 is_stmt 0 view .LVU293
ARM GAS  /tmp/cciVSvjL.s 			page 34


 1353 0004 1B28     		cmp	r0, #27
 1354 0006 02D9     		bls	.L75
 528:Core/Src/rf69.c **** 		return false;
 1355              		.loc 1 528 10 view .LVU294
 1356 0008 0020     		movs	r0, #0
 1357              	.LVL134:
 1358              	.L73:
 529:Core/Src/rf69.c **** 
 530:Core/Src/rf69.c **** 	ModemConfig cfg;
 531:Core/Src/rf69.c **** 	memcpy(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(ModemConfig));
 532:Core/Src/rf69.c **** 	setModemRegisters(&cfg);
 533:Core/Src/rf69.c **** 
 534:Core/Src/rf69.c **** 	return true;
 535:Core/Src/rf69.c **** }
 1359              		.loc 1 535 1 view .LVU295
 1360 000a 03B0     		add	sp, sp, #12
 1361              		@ sp needed
 1362 000c 00BD     		pop	{pc}
 1363              	.LVL135:
 1364              	.L75:
 530:Core/Src/rf69.c **** 	memcpy(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(ModemConfig));
 1365              		.loc 1 530 2 is_stmt 1 view .LVU296
 531:Core/Src/rf69.c **** 	setModemRegisters(&cfg);
 1366              		.loc 1 531 2 view .LVU297
 531:Core/Src/rf69.c **** 	setModemRegisters(&cfg);
 1367              		.loc 1 531 15 is_stmt 0 view .LVU298
 1368 000e C000     		lsls	r0, r0, #3
 1369              	.LVL136:
 531:Core/Src/rf69.c **** 	setModemRegisters(&cfg);
 1370              		.loc 1 531 15 view .LVU299
 1371 0010 0549     		ldr	r1, .L76
 1372 0012 4118     		adds	r1, r0, r1
 531:Core/Src/rf69.c **** 	setModemRegisters(&cfg);
 1373              		.loc 1 531 2 view .LVU300
 1374 0014 0822     		movs	r2, #8
 1375 0016 6846     		mov	r0, sp
 1376 0018 FFF7FEFF 		bl	memcpy
 1377              	.LVL137:
 532:Core/Src/rf69.c **** 
 1378              		.loc 1 532 2 is_stmt 1 view .LVU301
 1379 001c 6846     		mov	r0, sp
 1380 001e FFF7FEFF 		bl	setModemRegisters
 1381              	.LVL138:
 534:Core/Src/rf69.c **** }
 1382              		.loc 1 534 2 view .LVU302
 534:Core/Src/rf69.c **** }
 1383              		.loc 1 534 9 is_stmt 0 view .LVU303
 1384 0022 0120     		movs	r0, #1
 1385 0024 F1E7     		b	.L73
 1386              	.L77:
 1387 0026 C046     		.align	2
 1388              	.L76:
 1389 0028 00000000 		.word	MODEM_CONFIG_TABLE
 1390              		.cfi_endproc
 1391              	.LFE59:
 1393              		.section	.text.setPreambleLength,"ax",%progbits
 1394              		.align	1
ARM GAS  /tmp/cciVSvjL.s 			page 35


 1395              		.global	setPreambleLength
 1396              		.syntax unified
 1397              		.code	16
 1398              		.thumb_func
 1400              	setPreambleLength:
 1401              	.LVL139:
 1402              	.LFB60:
 536:Core/Src/rf69.c **** 
 537:Core/Src/rf69.c **** void setPreambleLength(uint16_t bytes)
 538:Core/Src/rf69.c **** {
 1403              		.loc 1 538 1 is_stmt 1 view -0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              		.loc 1 538 1 is_stmt 0 view .LVU305
 1408 0000 10B5     		push	{r4, lr}
 1409              		.cfi_def_cfa_offset 8
 1410              		.cfi_offset 4, -8
 1411              		.cfi_offset 14, -4
 1412 0002 0400     		movs	r4, r0
 539:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_2C_PREAMBLEMSB, bytes >> 8);
 1413              		.loc 1 539 2 is_stmt 1 view .LVU306
 1414 0004 010A     		lsrs	r1, r0, #8
 1415 0006 2C20     		movs	r0, #44
 1416              	.LVL140:
 1417              		.loc 1 539 2 is_stmt 0 view .LVU307
 1418 0008 FFF7FEFF 		bl	spiWrite
 1419              	.LVL141:
 540:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_2D_PREAMBLELSB, bytes & 0xff);
 1420              		.loc 1 540 2 is_stmt 1 view .LVU308
 1421 000c E1B2     		uxtb	r1, r4
 1422 000e 2D20     		movs	r0, #45
 1423 0010 FFF7FEFF 		bl	spiWrite
 1424              	.LVL142:
 541:Core/Src/rf69.c **** }
 1425              		.loc 1 541 1 is_stmt 0 view .LVU309
 1426              		@ sp needed
 1427              	.LVL143:
 1428              		.loc 1 541 1 view .LVU310
 1429 0014 10BD     		pop	{r4, pc}
 1430              		.cfi_endproc
 1431              	.LFE60:
 1433              		.section	.text.setSyncWords,"ax",%progbits
 1434              		.align	1
 1435              		.global	setSyncWords
 1436              		.syntax unified
 1437              		.code	16
 1438              		.thumb_func
 1440              	setSyncWords:
 1441              	.LVL144:
 1442              	.LFB61:
 542:Core/Src/rf69.c **** 
 543:Core/Src/rf69.c **** void setSyncWords(const uint8_t* syncWords, uint8_t len)
 544:Core/Src/rf69.c **** {
 1443              		.loc 1 544 1 is_stmt 1 view -0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cciVSvjL.s 			page 36


 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447              		.loc 1 544 1 is_stmt 0 view .LVU312
 1448 0000 70B5     		push	{r4, r5, r6, lr}
 1449              		.cfi_def_cfa_offset 16
 1450              		.cfi_offset 4, -16
 1451              		.cfi_offset 5, -12
 1452              		.cfi_offset 6, -8
 1453              		.cfi_offset 14, -4
 1454 0002 0500     		movs	r5, r0
 1455 0004 0C00     		movs	r4, r1
 545:Core/Src/rf69.c **** 	uint8_t syncconfig = spiRead(RH_RF69_REG_2E_SYNCCONFIG);
 1456              		.loc 1 545 2 is_stmt 1 view .LVU313
 1457              		.loc 1 545 23 is_stmt 0 view .LVU314
 1458 0006 2E20     		movs	r0, #46
 1459              	.LVL145:
 1460              		.loc 1 545 23 view .LVU315
 1461 0008 FFF7FEFF 		bl	spiRead
 1462              	.LVL146:
 1463              		.loc 1 545 23 view .LVU316
 1464 000c 0600     		movs	r6, r0
 1465              	.LVL147:
 546:Core/Src/rf69.c **** 	if (syncWords && len && len <= 4)
 1466              		.loc 1 546 2 is_stmt 1 view .LVU317
 1467              		.loc 1 546 5 is_stmt 0 view .LVU318
 1468 000e 002D     		cmp	r5, #0
 1469 0010 03D0     		beq	.L80
 1470              		.loc 1 546 16 discriminator 1 view .LVU319
 1471 0012 002C     		cmp	r4, #0
 1472 0014 01D0     		beq	.L80
 1473              		.loc 1 546 23 discriminator 2 view .LVU320
 1474 0016 042C     		cmp	r4, #4
 1475 0018 0BD9     		bls	.L82
 1476              	.L80:
 547:Core/Src/rf69.c **** 	{
 548:Core/Src/rf69.c **** 	spiBurstWrite(RH_RF69_REG_2F_SYNCVALUE1, syncWords, len);
 549:Core/Src/rf69.c **** 
 550:Core/Src/rf69.c **** #if 0
 551:Core/Src/rf69.c **** 	uint8_t dest[8];
 552:Core/Src/rf69.c **** 	spiBurstRead(RH_RF69_REG_2F_SYNCVALUE1, dest, 8);
 553:Core/Src/rf69.c **** 	for (int i=0;i<8;i++) {
 554:Core/Src/rf69.c **** 		//ESP_LOGI(TAG, "RH_RF69_REG_2F_SYNCVALUE1[%d]=%x", i, dest[i]);
 555:Core/Src/rf69.c **** 	}
 556:Core/Src/rf69.c **** #endif
 557:Core/Src/rf69.c **** 
 558:Core/Src/rf69.c **** 	syncconfig |= RH_RF69_SYNCCONFIG_SYNCON;
 559:Core/Src/rf69.c **** 	}
 560:Core/Src/rf69.c **** 	else
 561:Core/Src/rf69.c **** 	syncconfig &= ~RH_RF69_SYNCCONFIG_SYNCON;
 1477              		.loc 1 561 2 is_stmt 1 view .LVU321
 1478              		.loc 1 561 13 is_stmt 0 view .LVU322
 1479 001a 7F21     		movs	r1, #127
 1480 001c 3140     		ands	r1, r6
 1481              	.LVL148:
 1482              	.L81:
 562:Core/Src/rf69.c **** 	syncconfig &= ~RH_RF69_SYNCCONFIG_SYNCSIZE;
 1483              		.loc 1 562 2 is_stmt 1 view .LVU323
 1484              		.loc 1 562 13 is_stmt 0 view .LVU324
ARM GAS  /tmp/cciVSvjL.s 			page 37


 1485 001e 3823     		movs	r3, #56
 1486 0020 9943     		bics	r1, r3
 1487              	.LVL149:
 563:Core/Src/rf69.c **** 	syncconfig |= (len-1) << 3;
 1488              		.loc 1 563 2 is_stmt 1 view .LVU325
 1489              		.loc 1 563 13 is_stmt 0 view .LVU326
 1490 0022 013C     		subs	r4, r4, #1
 1491              	.LVL150:
 1492              		.loc 1 563 13 view .LVU327
 1493 0024 E400     		lsls	r4, r4, #3
 1494              	.LVL151:
 1495              		.loc 1 563 13 view .LVU328
 1496 0026 2143     		orrs	r1, r4
 1497              	.LVL152:
 1498              		.loc 1 563 13 view .LVU329
 1499 0028 C9B2     		uxtb	r1, r1
 1500              	.LVL153:
 564:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "syncconfig=%x", syncconfig);
 565:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_2E_SYNCCONFIG, syncconfig);
 1501              		.loc 1 565 2 is_stmt 1 view .LVU330
 1502 002a 2E20     		movs	r0, #46
 1503 002c FFF7FEFF 		bl	spiWrite
 1504              	.LVL154:
 566:Core/Src/rf69.c **** }
 1505              		.loc 1 566 1 is_stmt 0 view .LVU331
 1506              		@ sp needed
 1507              	.LVL155:
 1508              		.loc 1 566 1 view .LVU332
 1509 0030 70BD     		pop	{r4, r5, r6, pc}
 1510              	.LVL156:
 1511              	.L82:
 548:Core/Src/rf69.c **** 
 1512              		.loc 1 548 2 is_stmt 1 view .LVU333
 1513 0032 2200     		movs	r2, r4
 1514 0034 2900     		movs	r1, r5
 1515 0036 2F20     		movs	r0, #47
 1516 0038 FFF7FEFF 		bl	spiBurstWrite
 1517              	.LVL157:
 558:Core/Src/rf69.c **** 	}
 1518              		.loc 1 558 2 view .LVU334
 558:Core/Src/rf69.c **** 	}
 1519              		.loc 1 558 13 is_stmt 0 view .LVU335
 1520 003c 8023     		movs	r3, #128
 1521 003e 5B42     		rsbs	r3, r3, #0
 1522 0040 3343     		orrs	r3, r6
 1523 0042 D9B2     		uxtb	r1, r3
 1524              	.LVL158:
 558:Core/Src/rf69.c **** 	}
 1525              		.loc 1 558 13 view .LVU336
 1526 0044 EBE7     		b	.L81
 1527              		.cfi_endproc
 1528              	.LFE61:
 1530              		.section	.text.setEncryptionKey,"ax",%progbits
 1531              		.align	1
 1532              		.global	setEncryptionKey
 1533              		.syntax unified
 1534              		.code	16
ARM GAS  /tmp/cciVSvjL.s 			page 38


 1535              		.thumb_func
 1537              	setEncryptionKey:
 1538              	.LVL159:
 1539              	.LFB62:
 567:Core/Src/rf69.c **** 
 568:Core/Src/rf69.c **** void setEncryptionKey(uint8_t* key)
 569:Core/Src/rf69.c **** {
 1540              		.loc 1 569 1 is_stmt 1 view -0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              		.loc 1 569 1 is_stmt 0 view .LVU338
 1545 0000 10B5     		push	{r4, lr}
 1546              		.cfi_def_cfa_offset 8
 1547              		.cfi_offset 4, -8
 1548              		.cfi_offset 14, -4
 1549 0002 011E     		subs	r1, r0, #0
 570:Core/Src/rf69.c **** 	if (key)
 1550              		.loc 1 570 2 is_stmt 1 view .LVU339
 1551              		.loc 1 570 5 is_stmt 0 view .LVU340
 1552 0004 0DD0     		beq	.L84
 571:Core/Src/rf69.c **** 	{
 572:Core/Src/rf69.c **** 	spiBurstWrite(RH_RF69_REG_3E_AESKEY1, key, 16);
 1553              		.loc 1 572 2 is_stmt 1 view .LVU341
 1554 0006 1022     		movs	r2, #16
 1555 0008 3E20     		movs	r0, #62
 1556              	.LVL160:
 1557              		.loc 1 572 2 is_stmt 0 view .LVU342
 1558 000a FFF7FEFF 		bl	spiBurstWrite
 1559              	.LVL161:
 573:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) | RH_RF69_PACKETCONFI
 1560              		.loc 1 573 2 is_stmt 1 view .LVU343
 1561              		.loc 1 573 41 is_stmt 0 view .LVU344
 1562 000e 3D20     		movs	r0, #61
 1563 0010 FFF7FEFF 		bl	spiRead
 1564              	.LVL162:
 1565              		.loc 1 573 2 discriminator 1 view .LVU345
 1566 0014 0123     		movs	r3, #1
 1567 0016 1843     		orrs	r0, r3
 1568 0018 C1B2     		uxtb	r1, r0
 1569 001a 3D20     		movs	r0, #61
 1570 001c FFF7FEFF 		bl	spiWrite
 1571              	.LVL163:
 1572              	.L83:
 574:Core/Src/rf69.c **** 	}
 575:Core/Src/rf69.c **** 	else
 576:Core/Src/rf69.c **** 	{
 577:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) & ~RH_RF69_PACKETCONF
 578:Core/Src/rf69.c **** 	}
 579:Core/Src/rf69.c **** }
 1573              		.loc 1 579 1 view .LVU346
 1574              		@ sp needed
 1575 0020 10BD     		pop	{r4, pc}
 1576              	.LVL164:
 1577              	.L84:
 577:Core/Src/rf69.c **** 	}
 1578              		.loc 1 577 2 is_stmt 1 view .LVU347
ARM GAS  /tmp/cciVSvjL.s 			page 39


 577:Core/Src/rf69.c **** 	}
 1579              		.loc 1 577 41 is_stmt 0 view .LVU348
 1580 0022 3D20     		movs	r0, #61
 1581              	.LVL165:
 577:Core/Src/rf69.c **** 	}
 1582              		.loc 1 577 41 view .LVU349
 1583 0024 FFF7FEFF 		bl	spiRead
 1584              	.LVL166:
 577:Core/Src/rf69.c **** 	}
 1585              		.loc 1 577 2 discriminator 1 view .LVU350
 1586 0028 0123     		movs	r3, #1
 1587 002a 9843     		bics	r0, r3
 1588 002c C1B2     		uxtb	r1, r0
 1589 002e 3D20     		movs	r0, #61
 1590 0030 FFF7FEFF 		bl	spiWrite
 1591              	.LVL167:
 1592              		.loc 1 579 1 view .LVU351
 1593 0034 F4E7     		b	.L83
 1594              		.cfi_endproc
 1595              	.LFE62:
 1597              		.section	.text.init,"ax",%progbits
 1598              		.align	1
 1599              		.global	init
 1600              		.syntax unified
 1601              		.code	16
 1602              		.thumb_func
 1604              	init:
 1605              	.LVL168:
 1606              	.LFB47:
 248:Core/Src/rf69.c **** 	// manual reset
 1607              		.loc 1 248 1 is_stmt 1 view -0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 8
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 248:Core/Src/rf69.c **** 	// manual reset
 1611              		.loc 1 248 1 is_stmt 0 view .LVU353
 1612 0000 30B5     		push	{r4, r5, lr}
 1613              		.cfi_def_cfa_offset 12
 1614              		.cfi_offset 4, -12
 1615              		.cfi_offset 5, -8
 1616              		.cfi_offset 14, -4
 1617 0002 83B0     		sub	sp, sp, #12
 1618              		.cfi_def_cfa_offset 24
 1619 0004 0400     		movs	r4, r0
 250:Core/Src/rf69.c **** 	delay(100);
 1620              		.loc 1 250 2 is_stmt 1 view .LVU354
 1621 0006 9025     		movs	r5, #144
 1622 0008 ED05     		lsls	r5, r5, #23
 1623 000a 0122     		movs	r2, #1
 1624 000c 0821     		movs	r1, #8
 1625 000e 2800     		movs	r0, r5
 1626              	.LVL169:
 250:Core/Src/rf69.c **** 	delay(100);
 1627              		.loc 1 250 2 is_stmt 0 view .LVU355
 1628 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1629              	.LVL170:
 251:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_RESET_GPIO_Port, RF69_RESET_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/cciVSvjL.s 			page 40


 1630              		.loc 1 251 2 is_stmt 1 view .LVU356
 1631 0014 6420     		movs	r0, #100
 1632 0016 FFF7FEFF 		bl	HAL_Delay
 1633              	.LVL171:
 252:Core/Src/rf69.c **** 	delay(100);
 1634              		.loc 1 252 2 view .LVU357
 1635 001a 0022     		movs	r2, #0
 1636 001c 0821     		movs	r1, #8
 1637 001e 2800     		movs	r0, r5
 1638 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1639              	.LVL172:
 253:Core/Src/rf69.c **** 
 1640              		.loc 1 253 2 view .LVU358
 1641 0024 6420     		movs	r0, #100
 1642 0026 FFF7FEFF 		bl	HAL_Delay
 1643              	.LVL173:
 255:Core/Src/rf69.c **** 
 1644              		.loc 1 255 2 view .LVU359
 255:Core/Src/rf69.c **** 
 1645              		.loc 1 255 12 is_stmt 0 view .LVU360
 1646 002a 1D4B     		ldr	r3, .L90
 1647 002c 0422     		movs	r2, #4
 1648 002e 1A70     		strb	r2, [r3]
 257:Core/Src/rf69.c **** 
 1649              		.loc 1 257 2 is_stmt 1 view .LVU361
 1650 0030 2000     		movs	r0, r4
 1651 0032 FFF7FEFF 		bl	spi_init
 1652              	.LVL174:
 262:Core/Src/rf69.c **** 	if (_deviceType != 0x24) return false;
 1653              		.loc 1 262 2 view .LVU362
 262:Core/Src/rf69.c **** 	if (_deviceType != 0x24) return false;
 1654              		.loc 1 262 16 is_stmt 0 view .LVU363
 1655 0036 1020     		movs	r0, #16
 1656 0038 FFF7FEFF 		bl	spiRead
 1657              	.LVL175:
 262:Core/Src/rf69.c **** 	if (_deviceType != 0x24) return false;
 1658              		.loc 1 262 14 discriminator 1 view .LVU364
 1659 003c 194B     		ldr	r3, .L90+4
 1660 003e 1870     		strb	r0, [r3]
 263:Core/Src/rf69.c **** #if 0
 1661              		.loc 1 263 2 is_stmt 1 view .LVU365
 263:Core/Src/rf69.c **** #if 0
 1662              		.loc 1 263 5 is_stmt 0 view .LVU366
 1663 0040 2428     		cmp	r0, #36
 1664 0042 02D0     		beq	.L89
 263:Core/Src/rf69.c **** #if 0
 1665              		.loc 1 263 34 discriminator 1 view .LVU367
 1666 0044 0020     		movs	r0, #0
 1667              	.L87:
 311:Core/Src/rf69.c **** 
 1668              		.loc 1 311 1 view .LVU368
 1669 0046 03B0     		add	sp, sp, #12
 1670              		@ sp needed
 1671              	.LVL176:
 311:Core/Src/rf69.c **** 
 1672              		.loc 1 311 1 view .LVU369
 1673 0048 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/cciVSvjL.s 			page 41


 1674              	.LVL177:
 1675              	.L89:
 270:Core/Src/rf69.c **** 
 1676              		.loc 1 270 2 is_stmt 1 view .LVU370
 1677 004a FFF7FEFF 		bl	setModeIdle
 1678              	.LVL178:
 281:Core/Src/rf69.c **** 	// RSSITHRESH is default
 1679              		.loc 1 281 2 view .LVU371
 1680 004e 8F21     		movs	r1, #143
 1681 0050 3C20     		movs	r0, #60
 1682 0052 FFF7FEFF 		bl	spiWrite
 1683              	.LVL179:
 289:Core/Src/rf69.c **** 	// If high power boost set previously, disable it
 1684              		.loc 1 289 2 view .LVU372
 1685 0056 3021     		movs	r1, #48
 1686 0058 6F20     		movs	r0, #111
 1687 005a FFF7FEFF 		bl	spiWrite
 1688              	.LVL180:
 291:Core/Src/rf69.c **** 	spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 1689              		.loc 1 291 2 view .LVU373
 1690 005e 5521     		movs	r1, #85
 1691 0060 5A20     		movs	r0, #90
 1692 0062 FFF7FEFF 		bl	spiWrite
 1693              	.LVL181:
 292:Core/Src/rf69.c **** 
 1694              		.loc 1 292 2 view .LVU374
 1695 0066 7021     		movs	r1, #112
 1696 0068 5C20     		movs	r0, #92
 1697 006a FFF7FEFF 		bl	spiWrite
 1698              	.LVL182:
 296:Core/Src/rf69.c **** 	setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
 1699              		.loc 1 296 2 view .LVU375
 296:Core/Src/rf69.c **** 	setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
 1700              		.loc 1 296 10 is_stmt 0 view .LVU376
 1701 006e 01A8     		add	r0, sp, #4
 1702 0070 0D4B     		ldr	r3, .L90+8
 1703 0072 0380     		strh	r3, [r0]
 297:Core/Src/rf69.c **** 	// Reasonably fast and reliable default speed and modulation
 1704              		.loc 1 297 2 is_stmt 1 view .LVU377
 1705 0074 0221     		movs	r1, #2
 1706 0076 FFF7FEFF 		bl	setSyncWords
 1707              	.LVL183:
 299:Core/Src/rf69.c **** 
 1708              		.loc 1 299 2 view .LVU378
 1709 007a 1220     		movs	r0, #18
 1710 007c FFF7FEFF 		bl	setModemConfig
 1711              	.LVL184:
 302:Core/Src/rf69.c **** 	// An innocuous ISM frequency, same as RF22's
 1712              		.loc 1 302 2 view .LVU379
 1713 0080 0420     		movs	r0, #4
 1714 0082 FFF7FEFF 		bl	setPreambleLength
 1715              	.LVL185:
 304:Core/Src/rf69.c **** 	// No encryption
 1716              		.loc 1 304 2 view .LVU380
 1717 0086 0948     		ldr	r0, .L90+12
 1718 0088 FFF7FEFF 		bl	setFrequency
 1719              	.LVL186:
ARM GAS  /tmp/cciVSvjL.s 			page 42


 306:Core/Src/rf69.c **** 	// +13dBm, same as power-on default
 1720              		.loc 1 306 2 view .LVU381
 1721 008c 0020     		movs	r0, #0
 1722 008e FFF7FEFF 		bl	setEncryptionKey
 1723              	.LVL187:
 308:Core/Src/rf69.c **** 
 1724              		.loc 1 308 2 view .LVU382
 1725 0092 0021     		movs	r1, #0
 1726 0094 0D20     		movs	r0, #13
 1727 0096 FFF7FEFF 		bl	setTxPower
 1728              	.LVL188:
 310:Core/Src/rf69.c **** }
 1729              		.loc 1 310 2 view .LVU383
 310:Core/Src/rf69.c **** }
 1730              		.loc 1 310 9 is_stmt 0 view .LVU384
 1731 009a 0120     		movs	r0, #1
 1732 009c D3E7     		b	.L87
 1733              	.L91:
 1734 009e C046     		.align	2
 1735              	.L90:
 1736 00a0 00000000 		.word	_idleMode
 1737 00a4 00000000 		.word	_deviceType
 1738 00a8 2DD4FFFF 		.word	-11219
 1739 00ac 0000D943 		.word	1138294784
 1740              		.cfi_endproc
 1741              	.LFE47:
 1743              		.section	.text.available,"ax",%progbits
 1744              		.align	1
 1745              		.global	available
 1746              		.syntax unified
 1747              		.code	16
 1748              		.thumb_func
 1750              	available:
 1751              	.LFB63:
 580:Core/Src/rf69.c **** 
 581:Core/Src/rf69.c **** bool available()
 582:Core/Src/rf69.c **** {
 1752              		.loc 1 582 1 is_stmt 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756 0000 10B5     		push	{r4, lr}
 1757              		.cfi_def_cfa_offset 8
 1758              		.cfi_offset 4, -8
 1759              		.cfi_offset 14, -4
 583:Core/Src/rf69.c **** 	// Get the interrupt cause
 584:Core/Src/rf69.c **** 	uint8_t irqflags2 = spiRead(RH_RF69_REG_28_IRQFLAGS2);
 1760              		.loc 1 584 2 view .LVU386
 1761              		.loc 1 584 22 is_stmt 0 view .LVU387
 1762 0002 2820     		movs	r0, #40
 1763 0004 FFF7FEFF 		bl	spiRead
 1764              	.LVL189:
 585:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "available irqflags2=%x", irqflags2);
 586:Core/Src/rf69.c **** 	// Must look for PAYLOADREADY, not CRCOK, since only PAYLOADREADY occurs _after_ AES decryption
 587:Core/Src/rf69.c **** 	// has been done
 588:Core/Src/rf69.c **** 	if (irqflags2 & RH_RF69_IRQFLAGS2_PAYLOADREADY) {
 1765              		.loc 1 588 2 is_stmt 1 view .LVU388
ARM GAS  /tmp/cciVSvjL.s 			page 43


 1766              		.loc 1 588 5 is_stmt 0 view .LVU389
 1767 0008 4007     		lsls	r0, r0, #29
 1768 000a 04D4     		bmi	.L95
 1769              	.LVL190:
 1770              	.L93:
 589:Core/Src/rf69.c **** 		// A complete message has been received with good CRC
 590:Core/Src/rf69.c **** 		_lastRssi = -((int8_t)(spiRead(RH_RF69_REG_24_RSSIVALUE) >> 1));
 591:Core/Src/rf69.c **** 		_lastPreambleTime = millis();
 592:Core/Src/rf69.c **** 
 593:Core/Src/rf69.c **** 		setModeIdle();
 594:Core/Src/rf69.c **** 		// Save it in our buffer
 595:Core/Src/rf69.c **** 		readFifo();
 596:Core/Src/rf69.c **** 		//ESP_LOGD(TAG, "PAYLOADREADY");
 597:Core/Src/rf69.c **** 	}
 598:Core/Src/rf69.c **** 	setModeRx(); // Make sure we are receiving
 1771              		.loc 1 598 2 is_stmt 1 view .LVU390
 1772 000c FFF7FEFF 		bl	setModeRx
 1773              	.LVL191:
 599:Core/Src/rf69.c **** 	return _rxBufValid;
 1774              		.loc 1 599 2 view .LVU391
 1775              		.loc 1 599 9 is_stmt 0 view .LVU392
 1776 0010 0A4B     		ldr	r3, .L96
 1777              		.loc 1 599 9 discriminator 1 view .LVU393
 1778 0012 1878     		ldrb	r0, [r3]
 600:Core/Src/rf69.c **** }
 1779              		.loc 1 600 1 view .LVU394
 1780              		@ sp needed
 1781 0014 10BD     		pop	{r4, pc}
 1782              	.L95:
 590:Core/Src/rf69.c **** 		_lastPreambleTime = millis();
 1783              		.loc 1 590 3 is_stmt 1 view .LVU395
 590:Core/Src/rf69.c **** 		_lastPreambleTime = millis();
 1784              		.loc 1 590 26 is_stmt 0 view .LVU396
 1785 0016 2420     		movs	r0, #36
 1786 0018 FFF7FEFF 		bl	spiRead
 1787              	.LVL192:
 590:Core/Src/rf69.c **** 		_lastPreambleTime = millis();
 1788              		.loc 1 590 17 discriminator 1 view .LVU397
 1789 001c 4308     		lsrs	r3, r0, #1
 1790 001e 5BB2     		sxtb	r3, r3
 1791 0020 9BB2     		uxth	r3, r3
 590:Core/Src/rf69.c **** 		_lastPreambleTime = millis();
 1792              		.loc 1 590 13 discriminator 1 view .LVU398
 1793 0022 074A     		ldr	r2, .L96+4
 1794 0024 5B42     		rsbs	r3, r3, #0
 1795 0026 1380     		strh	r3, [r2]
 591:Core/Src/rf69.c **** 
 1796              		.loc 1 591 3 is_stmt 1 view .LVU399
 591:Core/Src/rf69.c **** 
 1797              		.loc 1 591 23 is_stmt 0 view .LVU400
 1798 0028 FFF7FEFF 		bl	HAL_GetTick
 1799              	.LVL193:
 591:Core/Src/rf69.c **** 
 1800              		.loc 1 591 21 discriminator 1 view .LVU401
 1801 002c 054B     		ldr	r3, .L96+8
 1802 002e 1860     		str	r0, [r3]
 593:Core/Src/rf69.c **** 		// Save it in our buffer
ARM GAS  /tmp/cciVSvjL.s 			page 44


 1803              		.loc 1 593 3 is_stmt 1 view .LVU402
 1804 0030 FFF7FEFF 		bl	setModeIdle
 1805              	.LVL194:
 595:Core/Src/rf69.c **** 		//ESP_LOGD(TAG, "PAYLOADREADY");
 1806              		.loc 1 595 3 view .LVU403
 1807 0034 FFF7FEFF 		bl	readFifo
 1808              	.LVL195:
 1809 0038 E8E7     		b	.L93
 1810              	.L97:
 1811 003a C046     		.align	2
 1812              	.L96:
 1813 003c 00000000 		.word	_rxBufValid
 1814 0040 00000000 		.word	_lastRssi
 1815 0044 00000000 		.word	_lastPreambleTime
 1816              		.cfi_endproc
 1817              	.LFE63:
 1819              		.section	.text.waitAvailableTimeout,"ax",%progbits
 1820              		.align	1
 1821              		.global	waitAvailableTimeout
 1822              		.syntax unified
 1823              		.code	16
 1824              		.thumb_func
 1826              	waitAvailableTimeout:
 1827              	.LVL196:
 1828              	.LFB64:
 601:Core/Src/rf69.c **** 
 602:Core/Src/rf69.c **** // Blocks until a valid message is received or timeout expires
 603:Core/Src/rf69.c **** // Return true if there is a message available
 604:Core/Src/rf69.c **** // Works correctly even on millis() rollover
 605:Core/Src/rf69.c **** bool waitAvailableTimeout(uint16_t timeout)
 606:Core/Src/rf69.c **** {
 1829              		.loc 1 606 1 view -0
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 0
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              		.loc 1 606 1 is_stmt 0 view .LVU405
 1834 0000 70B5     		push	{r4, r5, r6, lr}
 1835              		.cfi_def_cfa_offset 16
 1836              		.cfi_offset 4, -16
 1837              		.cfi_offset 5, -12
 1838              		.cfi_offset 6, -8
 1839              		.cfi_offset 14, -4
 1840 0002 0500     		movs	r5, r0
 607:Core/Src/rf69.c **** 	unsigned long starttime = millis();
 1841              		.loc 1 607 2 is_stmt 1 view .LVU406
 1842              		.loc 1 607 28 is_stmt 0 view .LVU407
 1843 0004 FFF7FEFF 		bl	HAL_GetTick
 1844              	.LVL197:
 1845              		.loc 1 607 28 view .LVU408
 1846 0008 0400     		movs	r4, r0
 1847              	.LVL198:
 608:Core/Src/rf69.c **** 	while ((millis() - starttime) < timeout)
 1848              		.loc 1 608 2 is_stmt 1 view .LVU409
 1849              		.loc 1 608 8 is_stmt 0 view .LVU410
 1850 000a 02E0     		b	.L99
 1851              	.LVL199:
 1852              	.L103:
ARM GAS  /tmp/cciVSvjL.s 			page 45


 609:Core/Src/rf69.c **** 	{
 610:Core/Src/rf69.c **** 		if (available())
 611:Core/Src/rf69.c **** 	{
 612:Core/Src/rf69.c **** 		   return true;
 613:Core/Src/rf69.c **** 	}
 614:Core/Src/rf69.c **** 	delay(1);
 1853              		.loc 1 614 2 is_stmt 1 view .LVU411
 1854 000c 0130     		adds	r0, r0, #1
 1855 000e FFF7FEFF 		bl	HAL_Delay
 1856              	.LVL200:
 1857              	.L99:
 608:Core/Src/rf69.c **** 	while ((millis() - starttime) < timeout)
 1858              		.loc 1 608 32 view .LVU412
 608:Core/Src/rf69.c **** 	while ((millis() - starttime) < timeout)
 1859              		.loc 1 608 10 is_stmt 0 view .LVU413
 1860 0012 FFF7FEFF 		bl	HAL_GetTick
 1861              	.LVL201:
 608:Core/Src/rf69.c **** 	while ((millis() - starttime) < timeout)
 1862              		.loc 1 608 19 discriminator 1 view .LVU414
 1863 0016 001B     		subs	r0, r0, r4
 608:Core/Src/rf69.c **** 	while ((millis() - starttime) < timeout)
 1864              		.loc 1 608 32 discriminator 1 view .LVU415
 1865 0018 A842     		cmp	r0, r5
 1866 001a 04D2     		bcs	.L102
 610:Core/Src/rf69.c **** 	{
 1867              		.loc 1 610 3 is_stmt 1 view .LVU416
 610:Core/Src/rf69.c **** 	{
 1868              		.loc 1 610 7 is_stmt 0 view .LVU417
 1869 001c FFF7FEFF 		bl	available
 1870              	.LVL202:
 610:Core/Src/rf69.c **** 	{
 1871              		.loc 1 610 6 discriminator 1 view .LVU418
 1872 0020 0028     		cmp	r0, #0
 1873 0022 F3D0     		beq	.L103
 1874 0024 00E0     		b	.L100
 1875              	.L102:
 615:Core/Src/rf69.c **** 	}
 616:Core/Src/rf69.c **** 	return false;
 1876              		.loc 1 616 9 view .LVU419
 1877 0026 0020     		movs	r0, #0
 1878              	.L100:
 617:Core/Src/rf69.c **** }
 1879              		.loc 1 617 1 view .LVU420
 1880              		@ sp needed
 1881              	.LVL203:
 1882              	.LVL204:
 1883              		.loc 1 617 1 view .LVU421
 1884 0028 70BD     		pop	{r4, r5, r6, pc}
 1885              		.cfi_endproc
 1886              	.LFE64:
 1888              		.section	.text.recv,"ax",%progbits
 1889              		.align	1
 1890              		.global	recv
 1891              		.syntax unified
 1892              		.code	16
 1893              		.thumb_func
 1895              	recv:
ARM GAS  /tmp/cciVSvjL.s 			page 46


 1896              	.LVL205:
 1897              	.LFB65:
 618:Core/Src/rf69.c **** 
 619:Core/Src/rf69.c **** 
 620:Core/Src/rf69.c **** bool recv(uint8_t* buf, uint8_t* len)
 621:Core/Src/rf69.c **** {
 1898              		.loc 1 621 1 is_stmt 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902              		.loc 1 621 1 is_stmt 0 view .LVU423
 1903 0000 70B5     		push	{r4, r5, r6, lr}
 1904              		.cfi_def_cfa_offset 16
 1905              		.cfi_offset 4, -16
 1906              		.cfi_offset 5, -12
 1907              		.cfi_offset 6, -8
 1908              		.cfi_offset 14, -4
 1909 0002 0600     		movs	r6, r0
 1910 0004 0D00     		movs	r5, r1
 622:Core/Src/rf69.c **** 	if (!available())
 1911              		.loc 1 622 2 is_stmt 1 view .LVU424
 1912              		.loc 1 622 7 is_stmt 0 view .LVU425
 1913 0006 FFF7FEFF 		bl	available
 1914              	.LVL206:
 1915              		.loc 1 622 7 view .LVU426
 1916 000a 041E     		subs	r4, r0, #0
 1917              		.loc 1 622 5 discriminator 1 view .LVU427
 1918 000c 11D0     		beq	.L105
 623:Core/Src/rf69.c **** 	return false;
 624:Core/Src/rf69.c **** 
 625:Core/Src/rf69.c **** 	if (buf && len)
 1919              		.loc 1 625 2 is_stmt 1 view .LVU428
 1920              		.loc 1 625 5 is_stmt 0 view .LVU429
 1921 000e 002E     		cmp	r6, #0
 1922 0010 0CD0     		beq	.L106
 1923              		.loc 1 625 10 discriminator 1 view .LVU430
 1924 0012 002D     		cmp	r5, #0
 1925 0014 0AD0     		beq	.L106
 626:Core/Src/rf69.c **** 	{
 627:Core/Src/rf69.c **** 	if (*len > _bufLen)
 1926              		.loc 1 627 2 is_stmt 1 view .LVU431
 1927              		.loc 1 627 6 is_stmt 0 view .LVU432
 1928 0016 2A78     		ldrb	r2, [r5]
 1929              		.loc 1 627 11 view .LVU433
 1930 0018 074B     		ldr	r3, .L108
 1931 001a 1B78     		ldrb	r3, [r3]
 1932              		.loc 1 627 5 view .LVU434
 1933 001c 9A42     		cmp	r2, r3
 1934 001e 00D9     		bls	.L107
 628:Core/Src/rf69.c **** 		*len = _bufLen;
 1935              		.loc 1 628 3 is_stmt 1 view .LVU435
 1936              		.loc 1 628 8 is_stmt 0 view .LVU436
 1937 0020 2B70     		strb	r3, [r5]
 1938              	.L107:
 629:Core/Src/rf69.c **** 	memcpy(buf, _buf, *len);
 1939              		.loc 1 629 2 is_stmt 1 view .LVU437
 1940              		.loc 1 629 20 is_stmt 0 view .LVU438
ARM GAS  /tmp/cciVSvjL.s 			page 47


 1941 0022 2A78     		ldrb	r2, [r5]
 1942              		.loc 1 629 2 view .LVU439
 1943 0024 0549     		ldr	r1, .L108+4
 1944 0026 3000     		movs	r0, r6
 1945 0028 FFF7FEFF 		bl	memcpy
 1946              	.LVL207:
 1947              	.L106:
 630:Core/Src/rf69.c **** 	}
 631:Core/Src/rf69.c **** 	_rxBufValid = false; // Got the most recent message
 1948              		.loc 1 631 2 is_stmt 1 view .LVU440
 1949              		.loc 1 631 14 is_stmt 0 view .LVU441
 1950 002c 044B     		ldr	r3, .L108+8
 1951 002e 0022     		movs	r2, #0
 1952 0030 1A70     		strb	r2, [r3]
 632:Core/Src/rf69.c **** //	  printBuffer("recv:", buf, *len);
 633:Core/Src/rf69.c **** 	return true;
 1953              		.loc 1 633 2 is_stmt 1 view .LVU442
 1954              	.L105:
 634:Core/Src/rf69.c **** }
 1955              		.loc 1 634 1 is_stmt 0 view .LVU443
 1956 0032 2000     		movs	r0, r4
 1957              		@ sp needed
 1958              	.LVL208:
 1959              	.LVL209:
 1960              		.loc 1 634 1 view .LVU444
 1961 0034 70BD     		pop	{r4, r5, r6, pc}
 1962              	.L109:
 1963 0036 C046     		.align	2
 1964              	.L108:
 1965 0038 00000000 		.word	_bufLen
 1966 003c 00000000 		.word	_buf
 1967 0040 00000000 		.word	_rxBufValid
 1968              		.cfi_endproc
 1969              	.LFE65:
 1971              		.section	.text.send,"ax",%progbits
 1972              		.align	1
 1973              		.global	send
 1974              		.syntax unified
 1975              		.code	16
 1976              		.thumb_func
 1978              	send:
 1979              	.LVL210:
 1980              	.LFB66:
 635:Core/Src/rf69.c **** 
 636:Core/Src/rf69.c **** bool send(const uint8_t* data, uint8_t len)
 637:Core/Src/rf69.c **** {
 1981              		.loc 1 637 1 is_stmt 1 view -0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 0
 1984              		@ frame_needed = 0, uses_anonymous_args = 0
 1985              		.loc 1 637 1 is_stmt 0 view .LVU446
 1986 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1987              		.cfi_def_cfa_offset 24
 1988              		.cfi_offset 3, -24
 1989              		.cfi_offset 4, -20
 1990              		.cfi_offset 5, -16
 1991              		.cfi_offset 6, -12
ARM GAS  /tmp/cciVSvjL.s 			page 48


 1992              		.cfi_offset 7, -8
 1993              		.cfi_offset 14, -4
 1994 0002 0600     		movs	r6, r0
 1995 0004 0C00     		movs	r4, r1
 638:Core/Src/rf69.c **** 	if (len > RH_RF69_MAX_MESSAGE_LEN)
 1996              		.loc 1 638 2 is_stmt 1 view .LVU447
 1997              		.loc 1 638 5 is_stmt 0 view .LVU448
 1998 0006 3C29     		cmp	r1, #60
 1999 0008 01D9     		bls	.L115
 639:Core/Src/rf69.c **** 	return false;
 2000              		.loc 1 639 9 view .LVU449
 2001 000a 0020     		movs	r0, #0
 2002              	.LVL211:
 2003              	.L111:
 640:Core/Src/rf69.c **** 
 641:Core/Src/rf69.c **** #if 0
 642:Core/Src/rf69.c **** 	waitPacketSent(); // Make sure we dont interrupt an outgoing message
 643:Core/Src/rf69.c **** #endif
 644:Core/Src/rf69.c **** 	setModeIdle(); // Prevent RX while filling the fifo
 645:Core/Src/rf69.c **** 
 646:Core/Src/rf69.c **** #if 0
 647:Core/Src/rf69.c **** 	if (!waitCAD())
 648:Core/Src/rf69.c **** 	return false;  // Check channel activity
 649:Core/Src/rf69.c **** #endif
 650:Core/Src/rf69.c **** 
 651:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "_txHeaderTo=%d", _txHeaderTo);
 652:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "_txHeaderFrom=%d", _txHeaderFrom);
 653:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "_txHeaderId=%d", _txHeaderId);
 654:Core/Src/rf69.c **** 	//ESP_LOGD(TAG, "_txHeaderFlags=%d", _txHeaderFlags);
 655:Core/Src/rf69.c **** 
 656:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_RESET);
 657:Core/Src/rf69.c **** 	spi_transfer(RH_RF69_REG_00_FIFO | RH_RF69_SPI_WRITE_MASK); // Send the start address with the wri
 658:Core/Src/rf69.c **** 	spi_transfer(len + RH_RF69_HEADER_LEN); // Include length of headers
 659:Core/Src/rf69.c **** 
 660:Core/Src/rf69.c **** 	spi_transfer(_txHeaderTo);
 661:Core/Src/rf69.c **** 	spi_transfer(_txHeaderFrom);
 662:Core/Src/rf69.c **** 	spi_transfer(_txHeaderId);
 663:Core/Src/rf69.c **** 	spi_transfer(_txHeaderFlags);
 664:Core/Src/rf69.c **** 	// Now the payload
 665:Core/Src/rf69.c **** 	while (len--)
 666:Core/Src/rf69.c **** 	spi_transfer(*data++);
 667:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 668:Core/Src/rf69.c **** 
 669:Core/Src/rf69.c **** 	setModeTx(); // Start the transmitter
 670:Core/Src/rf69.c **** 	delay(1);
 671:Core/Src/rf69.c **** 	return true;
 672:Core/Src/rf69.c **** }
 2004              		.loc 1 672 1 view .LVU450
 2005              		@ sp needed
 2006              	.LVL212:
 2007              		.loc 1 672 1 view .LVU451
 2008 000c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2009              	.LVL213:
 2010              	.L115:
 644:Core/Src/rf69.c **** 
 2011              		.loc 1 644 2 is_stmt 1 view .LVU452
 2012 000e FFF7FEFF 		bl	setModeIdle
ARM GAS  /tmp/cciVSvjL.s 			page 49


 2013              	.LVL214:
 656:Core/Src/rf69.c **** 	spi_transfer(RH_RF69_REG_00_FIFO | RH_RF69_SPI_WRITE_MASK); // Send the start address with the wri
 2014              		.loc 1 656 2 view .LVU453
 2015 0012 9020     		movs	r0, #144
 2016 0014 0022     		movs	r2, #0
 2017 0016 1021     		movs	r1, #16
 2018 0018 C005     		lsls	r0, r0, #23
 2019 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2020              	.LVL215:
 657:Core/Src/rf69.c **** 	spi_transfer(len + RH_RF69_HEADER_LEN); // Include length of headers
 2021              		.loc 1 657 2 view .LVU454
 2022 001e 8020     		movs	r0, #128
 2023 0020 FFF7FEFF 		bl	spi_transfer
 2024              	.LVL216:
 658:Core/Src/rf69.c **** 
 2025              		.loc 1 658 2 view .LVU455
 2026 0024 201D     		adds	r0, r4, #4
 2027 0026 C0B2     		uxtb	r0, r0
 2028 0028 FFF7FEFF 		bl	spi_transfer
 2029              	.LVL217:
 660:Core/Src/rf69.c **** 	spi_transfer(_txHeaderFrom);
 2030              		.loc 1 660 2 view .LVU456
 2031 002c FF20     		movs	r0, #255
 2032 002e FFF7FEFF 		bl	spi_transfer
 2033              	.LVL218:
 661:Core/Src/rf69.c **** 	spi_transfer(_txHeaderId);
 2034              		.loc 1 661 2 view .LVU457
 2035 0032 FF20     		movs	r0, #255
 2036 0034 FFF7FEFF 		bl	spi_transfer
 2037              	.LVL219:
 662:Core/Src/rf69.c **** 	spi_transfer(_txHeaderFlags);
 2038              		.loc 1 662 2 view .LVU458
 2039 0038 0020     		movs	r0, #0
 2040 003a FFF7FEFF 		bl	spi_transfer
 2041              	.LVL220:
 663:Core/Src/rf69.c **** 	// Now the payload
 2042              		.loc 1 663 2 view .LVU459
 2043 003e 0020     		movs	r0, #0
 2044 0040 FFF7FEFF 		bl	spi_transfer
 2045              	.LVL221:
 665:Core/Src/rf69.c **** 	spi_transfer(*data++);
 2046              		.loc 1 665 2 view .LVU460
 665:Core/Src/rf69.c **** 	spi_transfer(*data++);
 2047              		.loc 1 665 8 is_stmt 0 view .LVU461
 2048 0044 05E0     		b	.L112
 2049              	.LVL222:
 2050              	.L113:
 666:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 2051              		.loc 1 666 2 is_stmt 1 view .LVU462
 666:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 2052              		.loc 1 666 20 is_stmt 0 view .LVU463
 2053 0046 771C     		adds	r7, r6, #1
 2054              	.LVL223:
 666:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 2055              		.loc 1 666 2 view .LVU464
 2056 0048 3078     		ldrb	r0, [r6]
 2057 004a FFF7FEFF 		bl	spi_transfer
ARM GAS  /tmp/cciVSvjL.s 			page 50


 2058              	.LVL224:
 665:Core/Src/rf69.c **** 	spi_transfer(*data++);
 2059              		.loc 1 665 12 view .LVU465
 2060 004e 2C00     		movs	r4, r5
 666:Core/Src/rf69.c **** 	HAL_GPIO_WritePin(RF69_NSS_GPIO_Port, RF69_NSS_Pin, GPIO_PIN_SET);
 2061              		.loc 1 666 20 view .LVU466
 2062 0050 3E00     		movs	r6, r7
 2063              	.LVL225:
 2064              	.L112:
 665:Core/Src/rf69.c **** 	spi_transfer(*data++);
 2065              		.loc 1 665 9 is_stmt 1 view .LVU467
 665:Core/Src/rf69.c **** 	spi_transfer(*data++);
 2066              		.loc 1 665 12 is_stmt 0 view .LVU468
 2067 0052 651E     		subs	r5, r4, #1
 2068 0054 EDB2     		uxtb	r5, r5
 2069              	.LVL226:
 665:Core/Src/rf69.c **** 	spi_transfer(*data++);
 2070              		.loc 1 665 9 view .LVU469
 2071 0056 002C     		cmp	r4, #0
 2072 0058 F5D1     		bne	.L113
 667:Core/Src/rf69.c **** 
 2073              		.loc 1 667 2 is_stmt 1 view .LVU470
 2074 005a 9020     		movs	r0, #144
 2075 005c 0122     		movs	r2, #1
 2076 005e 1021     		movs	r1, #16
 2077 0060 C005     		lsls	r0, r0, #23
 2078 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2079              	.LVL227:
 669:Core/Src/rf69.c **** 	delay(1);
 2080              		.loc 1 669 2 view .LVU471
 2081 0066 FFF7FEFF 		bl	setModeTx
 2082              	.LVL228:
 670:Core/Src/rf69.c **** 	return true;
 2083              		.loc 1 670 2 view .LVU472
 2084 006a 0120     		movs	r0, #1
 2085 006c FFF7FEFF 		bl	HAL_Delay
 2086              	.LVL229:
 671:Core/Src/rf69.c **** }
 2087              		.loc 1 671 2 view .LVU473
 671:Core/Src/rf69.c **** }
 2088              		.loc 1 671 9 is_stmt 0 view .LVU474
 2089 0070 0120     		movs	r0, #1
 2090 0072 CBE7     		b	.L111
 2091              		.cfi_endproc
 2092              	.LFE66:
 2094              		.section	.text.waitPacketSent,"ax",%progbits
 2095              		.align	1
 2096              		.global	waitPacketSent
 2097              		.syntax unified
 2098              		.code	16
 2099              		.thumb_func
 2101              	waitPacketSent:
 2102              	.LFB67:
 673:Core/Src/rf69.c **** 
 674:Core/Src/rf69.c **** bool waitPacketSent()
 675:Core/Src/rf69.c **** {
 2103              		.loc 1 675 1 is_stmt 1 view -0
ARM GAS  /tmp/cciVSvjL.s 			page 51


 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107 0000 10B5     		push	{r4, lr}
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 4, -8
 2110              		.cfi_offset 14, -4
 2111 0002 02E0     		b	.L118
 2112              	.LVL230:
 2113              	.L121:
 2114              	.LBB2:
 676:Core/Src/rf69.c **** 	while (1) {
 677:Core/Src/rf69.c **** 		// Get the interrupt cause
 678:Core/Src/rf69.c **** 		uint8_t irqflags2 = spiRead(RH_RF69_REG_28_IRQFLAGS2);
 679:Core/Src/rf69.c **** 		//ESP_LOGD(TAG, "waitPacketSent irqflags2=%x", irqflags2);
 680:Core/Src/rf69.c **** 		if (irqflags2 & RH_RF69_IRQFLAGS2_PACKETSENT) {
 681:Core/Src/rf69.c **** 			// A transmitter message has been fully sent
 682:Core/Src/rf69.c **** 			setModeIdle(); // Clears FIFO
 683:Core/Src/rf69.c **** 			_txGood++;
 684:Core/Src/rf69.c **** 			//ESP_LOGD(TAG, "PACKETSENT");
 685:Core/Src/rf69.c **** 			break;
 686:Core/Src/rf69.c **** 		}
 687:Core/Src/rf69.c **** 		delay(1);
 2115              		.loc 1 687 3 view .LVU476
 2116 0004 0120     		movs	r0, #1
 2117 0006 FFF7FEFF 		bl	HAL_Delay
 2118              	.LVL231:
 2119              	.LBE2:
 676:Core/Src/rf69.c **** 	while (1) {
 2120              		.loc 1 676 8 view .LVU477
 2121              	.L118:
 676:Core/Src/rf69.c **** 	while (1) {
 2122              		.loc 1 676 2 view .LVU478
 2123              	.LBB3:
 678:Core/Src/rf69.c **** 		//ESP_LOGD(TAG, "waitPacketSent irqflags2=%x", irqflags2);
 2124              		.loc 1 678 3 view .LVU479
 678:Core/Src/rf69.c **** 		//ESP_LOGD(TAG, "waitPacketSent irqflags2=%x", irqflags2);
 2125              		.loc 1 678 23 is_stmt 0 view .LVU480
 2126 000a 2820     		movs	r0, #40
 2127 000c FFF7FEFF 		bl	spiRead
 2128              	.LVL232:
 680:Core/Src/rf69.c **** 			// A transmitter message has been fully sent
 2129              		.loc 1 680 3 is_stmt 1 view .LVU481
 680:Core/Src/rf69.c **** 			// A transmitter message has been fully sent
 2130              		.loc 1 680 6 is_stmt 0 view .LVU482
 2131 0010 0007     		lsls	r0, r0, #28
 2132 0012 F7D5     		bpl	.L121
 2133              	.LVL233:
 682:Core/Src/rf69.c **** 			_txGood++;
 2134              		.loc 1 682 4 is_stmt 1 view .LVU483
 2135 0014 FFF7FEFF 		bl	setModeIdle
 2136              	.LVL234:
 683:Core/Src/rf69.c **** 			//ESP_LOGD(TAG, "PACKETSENT");
 2137              		.loc 1 683 4 view .LVU484
 683:Core/Src/rf69.c **** 			//ESP_LOGD(TAG, "PACKETSENT");
 2138              		.loc 1 683 11 is_stmt 0 view .LVU485
 2139 0018 024A     		ldr	r2, .L122
ARM GAS  /tmp/cciVSvjL.s 			page 52


 2140 001a 1388     		ldrh	r3, [r2]
 2141 001c 0133     		adds	r3, r3, #1
 2142 001e 1380     		strh	r3, [r2]
 685:Core/Src/rf69.c **** 		}
 2143              		.loc 1 685 4 is_stmt 1 view .LVU486
 2144              	.LBE3:
 688:Core/Src/rf69.c **** 	}
 689:Core/Src/rf69.c **** 	return true;
 2145              		.loc 1 689 2 view .LVU487
 690:Core/Src/rf69.c **** }
 2146              		.loc 1 690 1 is_stmt 0 view .LVU488
 2147 0020 0120     		movs	r0, #1
 2148              		@ sp needed
 2149 0022 10BD     		pop	{r4, pc}
 2150              	.L123:
 2151              		.align	2
 2152              	.L122:
 2153 0024 00000000 		.word	_txGood
 2154              		.cfi_endproc
 2155              	.LFE67:
 2157              		.section	.text.maxMessageLength,"ax",%progbits
 2158              		.align	1
 2159              		.global	maxMessageLength
 2160              		.syntax unified
 2161              		.code	16
 2162              		.thumb_func
 2164              	maxMessageLength:
 2165              	.LFB68:
 691:Core/Src/rf69.c **** 
 692:Core/Src/rf69.c **** 
 693:Core/Src/rf69.c **** uint8_t maxMessageLength()
 694:Core/Src/rf69.c **** {
 2166              		.loc 1 694 1 is_stmt 1 view -0
 2167              		.cfi_startproc
 2168              		@ args = 0, pretend = 0, frame = 0
 2169              		@ frame_needed = 0, uses_anonymous_args = 0
 2170              		@ link register save eliminated.
 695:Core/Src/rf69.c **** 	return RH_RF69_MAX_MESSAGE_LEN;
 2171              		.loc 1 695 2 view .LVU490
 696:Core/Src/rf69.c **** }
 2172              		.loc 1 696 1 is_stmt 0 view .LVU491
 2173 0000 3C20     		movs	r0, #60
 2174              		@ sp needed
 2175 0002 7047     		bx	lr
 2176              		.cfi_endproc
 2177              	.LFE68:
 2179              		.section	.text.headerTo,"ax",%progbits
 2180              		.align	1
 2181              		.global	headerTo
 2182              		.syntax unified
 2183              		.code	16
 2184              		.thumb_func
 2186              	headerTo:
 2187              	.LFB69:
 697:Core/Src/rf69.c **** 
 698:Core/Src/rf69.c **** #if 0
 699:Core/Src/rf69.c **** bool printRegister(uint8_t reg)
ARM GAS  /tmp/cciVSvjL.s 			page 53


 700:Core/Src/rf69.c **** {
 701:Core/Src/rf69.c **** 	printf("%x %x\n", reg, spiRead(reg));
 702:Core/Src/rf69.c **** 	return true;
 703:Core/Src/rf69.c **** }
 704:Core/Src/rf69.c **** 
 705:Core/Src/rf69.c **** bool printRegisters()
 706:Core/Src/rf69.c **** {
 707:Core/Src/rf69.c **** 	uint8_t i;
 708:Core/Src/rf69.c **** 	for (i = 0; i < 0x50; i++)
 709:Core/Src/rf69.c **** 	printRegister(i);
 710:Core/Src/rf69.c **** 	// Non-contiguous registers
 711:Core/Src/rf69.c **** 	printRegister(RH_RF69_REG_58_TESTLNA);
 712:Core/Src/rf69.c **** 	printRegister(RH_RF69_REG_6F_TESTDAGC);
 713:Core/Src/rf69.c **** 	printRegister(RH_RF69_REG_71_TESTAFC);
 714:Core/Src/rf69.c **** 
 715:Core/Src/rf69.c **** 	return true;
 716:Core/Src/rf69.c **** }
 717:Core/Src/rf69.c **** #endif
 718:Core/Src/rf69.c **** 
 719:Core/Src/rf69.c **** uint8_t headerTo()
 720:Core/Src/rf69.c **** {
 2188              		.loc 1 720 1 is_stmt 1 view -0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 0
 2191              		@ frame_needed = 0, uses_anonymous_args = 0
 2192              		@ link register save eliminated.
 721:Core/Src/rf69.c **** 	return _rxHeaderTo;
 2193              		.loc 1 721 2 view .LVU493
 2194              		.loc 1 721 9 is_stmt 0 view .LVU494
 2195 0000 014B     		ldr	r3, .L126
 2196              		.loc 1 721 9 discriminator 1 view .LVU495
 2197 0002 1878     		ldrb	r0, [r3]
 722:Core/Src/rf69.c **** }
 2198              		.loc 1 722 1 view .LVU496
 2199              		@ sp needed
 2200 0004 7047     		bx	lr
 2201              	.L127:
 2202 0006 C046     		.align	2
 2203              	.L126:
 2204 0008 00000000 		.word	_rxHeaderTo
 2205              		.cfi_endproc
 2206              	.LFE69:
 2208              		.section	.text.headerFrom,"ax",%progbits
 2209              		.align	1
 2210              		.global	headerFrom
 2211              		.syntax unified
 2212              		.code	16
 2213              		.thumb_func
 2215              	headerFrom:
 2216              	.LFB70:
 723:Core/Src/rf69.c **** 
 724:Core/Src/rf69.c **** uint8_t headerFrom()
 725:Core/Src/rf69.c **** {
 2217              		.loc 1 725 1 is_stmt 1 view -0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cciVSvjL.s 			page 54


 2221              		@ link register save eliminated.
 726:Core/Src/rf69.c **** 	return _rxHeaderFrom;
 2222              		.loc 1 726 2 view .LVU498
 2223              		.loc 1 726 9 is_stmt 0 view .LVU499
 2224 0000 014B     		ldr	r3, .L129
 2225              		.loc 1 726 9 discriminator 1 view .LVU500
 2226 0002 1878     		ldrb	r0, [r3]
 727:Core/Src/rf69.c **** }
 2227              		.loc 1 727 1 view .LVU501
 2228              		@ sp needed
 2229 0004 7047     		bx	lr
 2230              	.L130:
 2231 0006 C046     		.align	2
 2232              	.L129:
 2233 0008 00000000 		.word	_rxHeaderFrom
 2234              		.cfi_endproc
 2235              	.LFE70:
 2237              		.section	.text.headerId,"ax",%progbits
 2238              		.align	1
 2239              		.global	headerId
 2240              		.syntax unified
 2241              		.code	16
 2242              		.thumb_func
 2244              	headerId:
 2245              	.LFB71:
 728:Core/Src/rf69.c **** 
 729:Core/Src/rf69.c **** uint8_t headerId()
 730:Core/Src/rf69.c **** {
 2246              		.loc 1 730 1 is_stmt 1 view -0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 0
 2249              		@ frame_needed = 0, uses_anonymous_args = 0
 2250              		@ link register save eliminated.
 731:Core/Src/rf69.c **** 	return _rxHeaderId;
 2251              		.loc 1 731 2 view .LVU503
 2252              		.loc 1 731 9 is_stmt 0 view .LVU504
 2253 0000 014B     		ldr	r3, .L132
 2254              		.loc 1 731 9 discriminator 1 view .LVU505
 2255 0002 1878     		ldrb	r0, [r3]
 732:Core/Src/rf69.c **** }
 2256              		.loc 1 732 1 view .LVU506
 2257              		@ sp needed
 2258 0004 7047     		bx	lr
 2259              	.L133:
 2260 0006 C046     		.align	2
 2261              	.L132:
 2262 0008 00000000 		.word	_rxHeaderId
 2263              		.cfi_endproc
 2264              	.LFE71:
 2266              		.section	.text.headerFlags,"ax",%progbits
 2267              		.align	1
 2268              		.global	headerFlags
 2269              		.syntax unified
 2270              		.code	16
 2271              		.thumb_func
 2273              	headerFlags:
 2274              	.LFB72:
ARM GAS  /tmp/cciVSvjL.s 			page 55


 733:Core/Src/rf69.c **** 
 734:Core/Src/rf69.c **** uint8_t headerFlags()
 735:Core/Src/rf69.c **** {
 2275              		.loc 1 735 1 is_stmt 1 view -0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
 2279              		@ link register save eliminated.
 736:Core/Src/rf69.c **** 	return _rxHeaderFlags;
 2280              		.loc 1 736 2 view .LVU508
 2281              		.loc 1 736 9 is_stmt 0 view .LVU509
 2282 0000 014B     		ldr	r3, .L135
 2283              		.loc 1 736 9 discriminator 1 view .LVU510
 2284 0002 1878     		ldrb	r0, [r3]
 737:Core/Src/rf69.c **** }
 2285              		.loc 1 737 1 view .LVU511
 2286              		@ sp needed
 2287 0004 7047     		bx	lr
 2288              	.L136:
 2289 0006 C046     		.align	2
 2290              	.L135:
 2291 0008 00000000 		.word	_rxHeaderFlags
 2292              		.cfi_endproc
 2293              	.LFE72:
 2295              		.section	.text.lastRssi,"ax",%progbits
 2296              		.align	1
 2297              		.global	lastRssi
 2298              		.syntax unified
 2299              		.code	16
 2300              		.thumb_func
 2302              	lastRssi:
 2303              	.LFB73:
 738:Core/Src/rf69.c **** 
 739:Core/Src/rf69.c **** int16_t lastRssi()
 740:Core/Src/rf69.c **** {
 2304              		.loc 1 740 1 is_stmt 1 view -0
 2305              		.cfi_startproc
 2306              		@ args = 0, pretend = 0, frame = 0
 2307              		@ frame_needed = 0, uses_anonymous_args = 0
 2308              		@ link register save eliminated.
 741:Core/Src/rf69.c **** 	return _lastRssi;
 2309              		.loc 1 741 2 view .LVU513
 2310              		.loc 1 741 9 is_stmt 0 view .LVU514
 2311 0000 014B     		ldr	r3, .L138
 2312              		.loc 1 741 9 discriminator 1 view .LVU515
 2313 0002 0020     		movs	r0, #0
 2314 0004 185E     		ldrsh	r0, [r3, r0]
 742:Core/Src/rf69.c **** }
 2315              		.loc 1 742 1 view .LVU516
 2316              		@ sp needed
 2317 0006 7047     		bx	lr
 2318              	.L139:
 2319              		.align	2
 2320              	.L138:
 2321 0008 00000000 		.word	_lastRssi
 2322              		.cfi_endproc
 2323              	.LFE73:
ARM GAS  /tmp/cciVSvjL.s 			page 56


 2325              		.section	.bss._handle,"aw",%nobits
 2326              		.align	2
 2329              	_handle:
 2330 0000 00000000 		.space	4
 2331              		.section	.rodata.MODEM_CONFIG_TABLE,"a"
 2332              		.align	2
 2335              	MODEM_CONFIG_TABLE:
 2336 0000 00       		.byte	0
 2337 0001 3E       		.byte	62
 2338 0002 80       		.byte	-128
 2339 0003 00       		.byte	0
 2340 0004 52       		.byte	82
 2341 0005 F4       		.byte	-12
 2342 0006 F4       		.byte	-12
 2343 0007 D0       		.byte	-48
 2344 0008 00       		.byte	0
 2345 0009 34       		.byte	52
 2346 000a 15       		.byte	21
 2347 000b 00       		.byte	0
 2348 000c 4F       		.byte	79
 2349 000d F4       		.byte	-12
 2350 000e F4       		.byte	-12
 2351 000f D0       		.byte	-48
 2352 0010 00       		.byte	0
 2353 0011 1A       		.byte	26
 2354 0012 0B       		.byte	11
 2355 0013 00       		.byte	0
 2356 0014 9D       		.byte	-99
 2357 0015 F4       		.byte	-12
 2358 0016 F4       		.byte	-12
 2359 0017 D0       		.byte	-48
 2360 0018 00       		.byte	0
 2361 0019 0D       		.byte	13
 2362 001a 05       		.byte	5
 2363 001b 01       		.byte	1
 2364 001c 3B       		.byte	59
 2365 001d F4       		.byte	-12
 2366 001e F4       		.byte	-12
 2367 001f D0       		.byte	-48
 2368 0020 00       		.byte	0
 2369 0021 06       		.byte	6
 2370 0022 83       		.byte	-125
 2371 0023 02       		.byte	2
 2372 0024 75       		.byte	117
 2373 0025 F3       		.byte	-13
 2374 0026 F3       		.byte	-13
 2375 0027 D0       		.byte	-48
 2376 0028 00       		.byte	0
 2377 0029 03       		.byte	3
 2378 002a 41       		.byte	65
 2379 002b 04       		.byte	4
 2380 002c EA       		.byte	-22
 2381 002d F2       		.byte	-14
 2382 002e F2       		.byte	-14
 2383 002f D0       		.byte	-48
 2384 0030 00       		.byte	0
 2385 0031 02       		.byte	2
ARM GAS  /tmp/cciVSvjL.s 			page 57


 2386 0032 2C       		.byte	44
 2387 0033 07       		.byte	7
 2388 0034 AE       		.byte	-82
 2389 0035 E2       		.byte	-30
 2390 0036 E2       		.byte	-30
 2391 0037 D0       		.byte	-48
 2392 0038 00       		.byte	0
 2393 0039 01       		.byte	1
 2394 003a 00       		.byte	0
 2395 003b 08       		.byte	8
 2396 003c 00       		.byte	0
 2397 003d E1       		.byte	-31
 2398 003e E1       		.byte	-31
 2399 003f D0       		.byte	-48
 2400 0040 00       		.byte	0
 2401 0041 00       		.byte	0
 2402 0042 80       		.byte	-128
 2403 0043 10       		.byte	16
 2404 0044 00       		.byte	0
 2405 0045 E0       		.byte	-32
 2406 0046 E0       		.byte	-32
 2407 0047 D0       		.byte	-48
 2408 0048 00       		.byte	0
 2409 0049 02       		.byte	2
 2410 004a 40       		.byte	64
 2411 004b 03       		.byte	3
 2412 004c 33       		.byte	51
 2413 004d 42       		.byte	66
 2414 004e 42       		.byte	66
 2415 004f D0       		.byte	-48
 2416 0050 01       		.byte	1
 2417 0051 3E       		.byte	62
 2418 0052 80       		.byte	-128
 2419 0053 00       		.byte	0
 2420 0054 52       		.byte	82
 2421 0055 F4       		.byte	-12
 2422 0056 F5       		.byte	-11
 2423 0057 D0       		.byte	-48
 2424 0058 01       		.byte	1
 2425 0059 34       		.byte	52
 2426 005a 15       		.byte	21
 2427 005b 00       		.byte	0
 2428 005c 4F       		.byte	79
 2429 005d F4       		.byte	-12
 2430 005e F4       		.byte	-12
 2431 005f D0       		.byte	-48
 2432 0060 01       		.byte	1
 2433 0061 1A       		.byte	26
 2434 0062 0B       		.byte	11
 2435 0063 00       		.byte	0
 2436 0064 9D       		.byte	-99
 2437 0065 F4       		.byte	-12
 2438 0066 F4       		.byte	-12
 2439 0067 D0       		.byte	-48
 2440 0068 01       		.byte	1
 2441 0069 0D       		.byte	13
 2442 006a 05       		.byte	5
ARM GAS  /tmp/cciVSvjL.s 			page 58


 2443 006b 01       		.byte	1
 2444 006c 3B       		.byte	59
 2445 006d F4       		.byte	-12
 2446 006e F4       		.byte	-12
 2447 006f D0       		.byte	-48
 2448 0070 01       		.byte	1
 2449 0071 06       		.byte	6
 2450 0072 83       		.byte	-125
 2451 0073 02       		.byte	2
 2452 0074 75       		.byte	117
 2453 0075 F3       		.byte	-13
 2454 0076 F3       		.byte	-13
 2455 0077 D0       		.byte	-48
 2456 0078 01       		.byte	1
 2457 0079 03       		.byte	3
 2458 007a 41       		.byte	65
 2459 007b 04       		.byte	4
 2460 007c EA       		.byte	-22
 2461 007d F2       		.byte	-14
 2462 007e F2       		.byte	-14
 2463 007f D0       		.byte	-48
 2464 0080 01       		.byte	1
 2465 0081 02       		.byte	2
 2466 0082 2C       		.byte	44
 2467 0083 07       		.byte	7
 2468 0084 AE       		.byte	-82
 2469 0085 E2       		.byte	-30
 2470 0086 E2       		.byte	-30
 2471 0087 D0       		.byte	-48
 2472 0088 01       		.byte	1
 2473 0089 01       		.byte	1
 2474 008a 00       		.byte	0
 2475 008b 08       		.byte	8
 2476 008c 00       		.byte	0
 2477 008d E1       		.byte	-31
 2478 008e E1       		.byte	-31
 2479 008f D0       		.byte	-48
 2480 0090 01       		.byte	1
 2481 0091 00       		.byte	0
 2482 0092 80       		.byte	-128
 2483 0093 10       		.byte	16
 2484 0094 00       		.byte	0
 2485 0095 E0       		.byte	-32
 2486 0096 E0       		.byte	-32
 2487 0097 D0       		.byte	-48
 2488 0098 01       		.byte	1
 2489 0099 02       		.byte	2
 2490 009a 40       		.byte	64
 2491 009b 03       		.byte	3
 2492 009c 33       		.byte	51
 2493 009d 42       		.byte	66
 2494 009e 42       		.byte	66
 2495 009f D0       		.byte	-48
 2496 00a0 08       		.byte	8
 2497 00a1 7D       		.byte	125
 2498 00a2 00       		.byte	0
 2499 00a3 00       		.byte	0
ARM GAS  /tmp/cciVSvjL.s 			page 59


 2500 00a4 10       		.byte	16
 2501 00a5 88       		.byte	-120
 2502 00a6 88       		.byte	-120
 2503 00a7 D0       		.byte	-48
 2504 00a8 08       		.byte	8
 2505 00a9 68       		.byte	104
 2506 00aa 2B       		.byte	43
 2507 00ab 00       		.byte	0
 2508 00ac 10       		.byte	16
 2509 00ad F1       		.byte	-15
 2510 00ae F1       		.byte	-15
 2511 00af D0       		.byte	-48
 2512 00b0 08       		.byte	8
 2513 00b1 34       		.byte	52
 2514 00b2 15       		.byte	21
 2515 00b3 00       		.byte	0
 2516 00b4 10       		.byte	16
 2517 00b5 F5       		.byte	-11
 2518 00b6 F5       		.byte	-11
 2519 00b7 D0       		.byte	-48
 2520 00b8 08       		.byte	8
 2521 00b9 1A       		.byte	26
 2522 00ba 0B       		.byte	11
 2523 00bb 00       		.byte	0
 2524 00bc 10       		.byte	16
 2525 00bd F4       		.byte	-12
 2526 00be F4       		.byte	-12
 2527 00bf D0       		.byte	-48
 2528 00c0 08       		.byte	8
 2529 00c1 0D       		.byte	13
 2530 00c2 05       		.byte	5
 2531 00c3 00       		.byte	0
 2532 00c4 10       		.byte	16
 2533 00c5 F3       		.byte	-13
 2534 00c6 F3       		.byte	-13
 2535 00c7 D0       		.byte	-48
 2536 00c8 08       		.byte	8
 2537 00c9 06       		.byte	6
 2538 00ca 83       		.byte	-125
 2539 00cb 00       		.byte	0
 2540 00cc 10       		.byte	16
 2541 00cd F2       		.byte	-14
 2542 00ce F2       		.byte	-14
 2543 00cf D0       		.byte	-48
 2544 00d0 08       		.byte	8
 2545 00d1 03       		.byte	3
 2546 00d2 E8       		.byte	-24
 2547 00d3 00       		.byte	0
 2548 00d4 10       		.byte	16
 2549 00d5 E2       		.byte	-30
 2550 00d6 E2       		.byte	-30
 2551 00d7 D0       		.byte	-48
 2552              		.section	.bss._txGood,"aw",%nobits
 2553              		.align	1
 2556              	_txGood:
 2557 0000 0000     		.space	2
 2558              		.section	.bss._rxGood,"aw",%nobits
ARM GAS  /tmp/cciVSvjL.s 			page 60


 2559              		.align	1
 2562              	_rxGood:
 2563 0000 0000     		.space	2
 2564              		.section	.bss._lastRssi,"aw",%nobits
 2565              		.align	1
 2568              	_lastRssi:
 2569 0000 0000     		.space	2
 2570              		.section	.bss._rxHeaderFlags,"aw",%nobits
 2573              	_rxHeaderFlags:
 2574 0000 00       		.space	1
 2575              		.section	.bss._rxHeaderId,"aw",%nobits
 2578              	_rxHeaderId:
 2579 0000 00       		.space	1
 2580              		.section	.bss._rxHeaderFrom,"aw",%nobits
 2583              	_rxHeaderFrom:
 2584 0000 00       		.space	1
 2585              		.section	.bss._rxHeaderTo,"aw",%nobits
 2588              	_rxHeaderTo:
 2589 0000 00       		.space	1
 2590              		.section	.bss._mode,"aw",%nobits
 2593              	_mode:
 2594 0000 00       		.space	1
 2595              		.section	.bss._lastPreambleTime,"aw",%nobits
 2596              		.align	2
 2599              	_lastPreambleTime:
 2600 0000 00000000 		.space	4
 2601              		.section	.bss._rxBufValid,"aw",%nobits
 2604              	_rxBufValid:
 2605 0000 00       		.space	1
 2606              		.section	.bss._buf,"aw",%nobits
 2607              		.align	2
 2610              	_buf:
 2611 0000 00000000 		.space	60
 2611      00000000 
 2611      00000000 
 2611      00000000 
 2611      00000000 
 2612              		.section	.bss._bufLen,"aw",%nobits
 2615              	_bufLen:
 2616 0000 00       		.space	1
 2617              		.section	.bss._power,"aw",%nobits
 2620              	_power:
 2621 0000 00       		.space	1
 2622              		.section	.bss._deviceType,"aw",%nobits
 2625              	_deviceType:
 2626 0000 00       		.space	1
 2627              		.section	.bss._idleMode,"aw",%nobits
 2630              	_idleMode:
 2631 0000 00       		.space	1
 2632              		.text
 2633              	.Letext0:
 2634              		.file 2 "/home/andruida/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 2635              		.file 3 "/home/andruida/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 2636              		.file 4 "/home/andruida/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 2637              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 2638              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2639              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
ARM GAS  /tmp/cciVSvjL.s 			page 61


 2640              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2641              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 2642              		.file 10 "Core/Inc/rf69.h"
 2643              		.file 11 "/home/andruida/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm
 2644              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2645              		.file 13 "<built-in>"
ARM GAS  /tmp/cciVSvjL.s 			page 62


DEFINED SYMBOLS
                            *ABS*:00000000 rf69.c
     /tmp/cciVSvjL.s:19     .text.spi_init:00000000 $t
     /tmp/cciVSvjL.s:25     .text.spi_init:00000000 spi_init
     /tmp/cciVSvjL.s:56     .text.spi_init:00000014 $d
     /tmp/cciVSvjL.s:2329   .bss._handle:00000000 _handle
     /tmp/cciVSvjL.s:61     .rodata.spi_transfer.str1.4:00000000 $d
     /tmp/cciVSvjL.s:65     .text.spi_transfer:00000000 $t
     /tmp/cciVSvjL.s:71     .text.spi_transfer:00000000 spi_transfer
     /tmp/cciVSvjL.s:122    .text.spi_transfer:0000002c $d
     /tmp/cciVSvjL.s:128    .text.spiRead:00000000 $t
     /tmp/cciVSvjL.s:134    .text.spiRead:00000000 spiRead
     /tmp/cciVSvjL.s:189    .text.spiWrite:00000000 $t
     /tmp/cciVSvjL.s:195    .text.spiWrite:00000000 spiWrite
     /tmp/cciVSvjL.s:257    .text.spiBurstRead:00000000 $t
     /tmp/cciVSvjL.s:263    .text.spiBurstRead:00000000 spiBurstRead
     /tmp/cciVSvjL.s:360    .text.spiBurstWrite:00000000 $t
     /tmp/cciVSvjL.s:366    .text.spiBurstWrite:00000000 spiBurstWrite
     /tmp/cciVSvjL.s:463    .text.setIdleMode:00000000 $t
     /tmp/cciVSvjL.s:469    .text.setIdleMode:00000000 setIdleMode
     /tmp/cciVSvjL.s:487    .text.setIdleMode:00000008 $d
     /tmp/cciVSvjL.s:2630   .bss._idleMode:00000000 _idleMode
     /tmp/cciVSvjL.s:492    .text.readFifo:00000000 $t
     /tmp/cciVSvjL.s:498    .text.readFifo:00000000 readFifo
     /tmp/cciVSvjL.s:635    .text.readFifo:00000094 $d
     /tmp/cciVSvjL.s:2588   .bss._rxHeaderTo:00000000 _rxHeaderTo
     /tmp/cciVSvjL.s:2583   .bss._rxHeaderFrom:00000000 _rxHeaderFrom
     /tmp/cciVSvjL.s:2578   .bss._rxHeaderId:00000000 _rxHeaderId
     /tmp/cciVSvjL.s:2573   .bss._rxHeaderFlags:00000000 _rxHeaderFlags
     /tmp/cciVSvjL.s:2615   .bss._bufLen:00000000 _bufLen
     /tmp/cciVSvjL.s:2610   .bss._buf:00000000 _buf
     /tmp/cciVSvjL.s:2562   .bss._rxGood:00000000 _rxGood
     /tmp/cciVSvjL.s:2604   .bss._rxBufValid:00000000 _rxBufValid
     /tmp/cciVSvjL.s:647    .text.temperatureRead:00000000 $t
     /tmp/cciVSvjL.s:653    .text.temperatureRead:00000000 temperatureRead
     /tmp/cciVSvjL.s:697    .text.setFrequency:00000000 $t
     /tmp/cciVSvjL.s:703    .text.setFrequency:00000000 setFrequency
     /tmp/cciVSvjL.s:767    .text.setFrequency:0000003c $d
     /tmp/cciVSvjL.s:773    .text.rssiRead:00000000 $t
     /tmp/cciVSvjL.s:779    .text.rssiRead:00000000 rssiRead
     /tmp/cciVSvjL.s:807    .text.setOpMode:00000000 $t
     /tmp/cciVSvjL.s:813    .text.setOpMode:00000000 setOpMode
     /tmp/cciVSvjL.s:876    .text.setModeIdle:00000000 $t
     /tmp/cciVSvjL.s:882    .text.setModeIdle:00000000 setModeIdle
     /tmp/cciVSvjL.s:937    .text.setModeIdle:00000038 $d
     /tmp/cciVSvjL.s:2593   .bss._mode:00000000 _mode
     /tmp/cciVSvjL.s:2620   .bss._power:00000000 _power
     /tmp/cciVSvjL.s:944    .text.setSleep:00000000 $t
     /tmp/cciVSvjL.s:950    .text.setSleep:00000000 setSleep
     /tmp/cciVSvjL.s:988    .text.setSleep:00000020 $d
     /tmp/cciVSvjL.s:993    .text.setModeRx:00000000 $t
     /tmp/cciVSvjL.s:999    .text.setModeRx:00000000 setModeRx
     /tmp/cciVSvjL.s:1058   .text.setModeRx:0000003c $d
     /tmp/cciVSvjL.s:1064   .text.setModeTx:00000000 $t
     /tmp/cciVSvjL.s:1070   .text.setModeTx:00000000 setModeTx
     /tmp/cciVSvjL.s:1129   .text.setModeTx:0000003c $d
     /tmp/cciVSvjL.s:1135   .text.setTxPower:00000000 $t
ARM GAS  /tmp/cciVSvjL.s 			page 63


     /tmp/cciVSvjL.s:1141   .text.setTxPower:00000000 setTxPower
     /tmp/cciVSvjL.s:1278   .text.setTxPower:00000080 $d
     /tmp/cciVSvjL.s:1283   .text.setModemRegisters:00000000 $t
     /tmp/cciVSvjL.s:1289   .text.setModemRegisters:00000000 setModemRegisters
     /tmp/cciVSvjL.s:1332   .text.setModemConfig:00000000 $t
     /tmp/cciVSvjL.s:1338   .text.setModemConfig:00000000 setModemConfig
     /tmp/cciVSvjL.s:1389   .text.setModemConfig:00000028 $d
     /tmp/cciVSvjL.s:2335   .rodata.MODEM_CONFIG_TABLE:00000000 MODEM_CONFIG_TABLE
     /tmp/cciVSvjL.s:1394   .text.setPreambleLength:00000000 $t
     /tmp/cciVSvjL.s:1400   .text.setPreambleLength:00000000 setPreambleLength
     /tmp/cciVSvjL.s:1434   .text.setSyncWords:00000000 $t
     /tmp/cciVSvjL.s:1440   .text.setSyncWords:00000000 setSyncWords
     /tmp/cciVSvjL.s:1531   .text.setEncryptionKey:00000000 $t
     /tmp/cciVSvjL.s:1537   .text.setEncryptionKey:00000000 setEncryptionKey
     /tmp/cciVSvjL.s:1598   .text.init:00000000 $t
     /tmp/cciVSvjL.s:1604   .text.init:00000000 init
     /tmp/cciVSvjL.s:1736   .text.init:000000a0 $d
     /tmp/cciVSvjL.s:2625   .bss._deviceType:00000000 _deviceType
     /tmp/cciVSvjL.s:1744   .text.available:00000000 $t
     /tmp/cciVSvjL.s:1750   .text.available:00000000 available
     /tmp/cciVSvjL.s:1813   .text.available:0000003c $d
     /tmp/cciVSvjL.s:2568   .bss._lastRssi:00000000 _lastRssi
     /tmp/cciVSvjL.s:2599   .bss._lastPreambleTime:00000000 _lastPreambleTime
     /tmp/cciVSvjL.s:1820   .text.waitAvailableTimeout:00000000 $t
     /tmp/cciVSvjL.s:1826   .text.waitAvailableTimeout:00000000 waitAvailableTimeout
     /tmp/cciVSvjL.s:1889   .text.recv:00000000 $t
     /tmp/cciVSvjL.s:1895   .text.recv:00000000 recv
     /tmp/cciVSvjL.s:1965   .text.recv:00000038 $d
     /tmp/cciVSvjL.s:1972   .text.send:00000000 $t
     /tmp/cciVSvjL.s:1978   .text.send:00000000 send
     /tmp/cciVSvjL.s:2095   .text.waitPacketSent:00000000 $t
     /tmp/cciVSvjL.s:2101   .text.waitPacketSent:00000000 waitPacketSent
     /tmp/cciVSvjL.s:2153   .text.waitPacketSent:00000024 $d
     /tmp/cciVSvjL.s:2556   .bss._txGood:00000000 _txGood
     /tmp/cciVSvjL.s:2158   .text.maxMessageLength:00000000 $t
     /tmp/cciVSvjL.s:2164   .text.maxMessageLength:00000000 maxMessageLength
     /tmp/cciVSvjL.s:2180   .text.headerTo:00000000 $t
     /tmp/cciVSvjL.s:2186   .text.headerTo:00000000 headerTo
     /tmp/cciVSvjL.s:2204   .text.headerTo:00000008 $d
     /tmp/cciVSvjL.s:2209   .text.headerFrom:00000000 $t
     /tmp/cciVSvjL.s:2215   .text.headerFrom:00000000 headerFrom
     /tmp/cciVSvjL.s:2233   .text.headerFrom:00000008 $d
     /tmp/cciVSvjL.s:2238   .text.headerId:00000000 $t
     /tmp/cciVSvjL.s:2244   .text.headerId:00000000 headerId
     /tmp/cciVSvjL.s:2262   .text.headerId:00000008 $d
     /tmp/cciVSvjL.s:2267   .text.headerFlags:00000000 $t
     /tmp/cciVSvjL.s:2273   .text.headerFlags:00000000 headerFlags
     /tmp/cciVSvjL.s:2291   .text.headerFlags:00000008 $d
     /tmp/cciVSvjL.s:2296   .text.lastRssi:00000000 $t
     /tmp/cciVSvjL.s:2302   .text.lastRssi:00000000 lastRssi
     /tmp/cciVSvjL.s:2321   .text.lastRssi:00000008 $d
     /tmp/cciVSvjL.s:2326   .bss._handle:00000000 $d
     /tmp/cciVSvjL.s:2332   .rodata.MODEM_CONFIG_TABLE:00000000 $d
     /tmp/cciVSvjL.s:2553   .bss._txGood:00000000 $d
     /tmp/cciVSvjL.s:2559   .bss._rxGood:00000000 $d
     /tmp/cciVSvjL.s:2565   .bss._lastRssi:00000000 $d
     /tmp/cciVSvjL.s:2574   .bss._rxHeaderFlags:00000000 $d
ARM GAS  /tmp/cciVSvjL.s 			page 64


     /tmp/cciVSvjL.s:2579   .bss._rxHeaderId:00000000 $d
     /tmp/cciVSvjL.s:2584   .bss._rxHeaderFrom:00000000 $d
     /tmp/cciVSvjL.s:2589   .bss._rxHeaderTo:00000000 $d
     /tmp/cciVSvjL.s:2594   .bss._mode:00000000 $d
     /tmp/cciVSvjL.s:2596   .bss._lastPreambleTime:00000000 $d
     /tmp/cciVSvjL.s:2605   .bss._rxBufValid:00000000 $d
     /tmp/cciVSvjL.s:2607   .bss._buf:00000000 $d
     /tmp/cciVSvjL.s:2616   .bss._bufLen:00000000 $d
     /tmp/cciVSvjL.s:2621   .bss._power:00000000 $d
     /tmp/cciVSvjL.s:2626   .bss._deviceType:00000000 $d
     /tmp/cciVSvjL.s:2631   .bss._idleMode:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_SPI_TransmitReceive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2uiz
memcpy
HAL_Delay
HAL_GetTick
